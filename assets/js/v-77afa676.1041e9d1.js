"use strict";(self.webpackChunkafternoon_grocery_store=self.webpackChunkafternoon_grocery_store||[]).push([[476],{1989:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-77afa676",path:"/blogs/LeetCode/2020/11-07-278TheFirstWrongVersion.html",title:"第一个错误的版本",lang:"zh-CN",frontmatter:{title:"第一个错误的版本",date:"2020-11-07T00:00:00.000Z",tags:["简单","力扣","二分搜索"],categories:["算法笔记"]},excerpt:"",headers:[{level:2,title:"题目描述",slug:"题目描述",children:[]},{level:2,title:"示例",slug:"示例",children:[]},{level:2,title:"算法设计",slug:"算法设计",children:[{level:3,title:"代码",slug:"代码",children:[]},{level:3,title:"复杂性分析",slug:"复杂性分析",children:[]},{level:3,title:"思考",slug:"思考",children:[]}]}],git:{createdTime:1642079704e3,updatedTime:1642079704e3,contributors:[{name:"shinuyeim",email:"shinuyemail@gmail.com",commits:1}]}}},5433:(n,s,a)=>{a.r(s),a.d(s,{default:()=>d});var e=a(6252);const t=(0,e._)("h2",{id:"题目描述",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#题目描述","aria-hidden":"true"},"#"),(0,e.Uk)(" 题目描述")],-1),l=(0,e._)("p",null,"你是产品经理，目前正在带领一个团队开发新的产品。不幸的是，你的产品的最新版本没有通过质量检测。由于每个版本都是基于之前的版本开发的，所以错误的版本之后的所有版本都是错的。",-1),p=(0,e._)("p",null,"假设你有 n 个版本 [1, 2, ..., n]，你想找出导致之后所有版本出错的第一个错误的版本。",-1),o=(0,e._)("p",null,"你可以通过调用 bool isBadVersion(version) 接口来判断版本号 version 是否在单元测试中出错。实现一个函数来查找第一个错误的版本。你应该尽量减少对调用 API 的次数。",-1),i=(0,e._)("h2",{id:"示例",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#示例","aria-hidden":"true"},"#"),(0,e.Uk)(" 示例")],-1),r=(0,e._)("div",{class:"custom-container tip"},[(0,e._)("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[(0,e._)("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[(0,e._)("circle",{cx:"12",cy:"12",r:"9"}),(0,e._)("path",{d:"M12 8h.01"}),(0,e._)("path",{d:"M11 12h1v4h1"})])]),(0,e._)("p",{class:"custom-container-title"},"TIP"),(0,e._)("p",null,"给定 n = 5，并且 version = 4 是第一个错误的版本"),(0,e._)("p",null,[(0,e.Uk)("调用 isBadVersion(3) -> false"),(0,e._)("br"),(0,e.Uk)(" 调用 isBadVersion(5) -> true"),(0,e._)("br"),(0,e.Uk)(" 调用 isBadVersion(4) -> true")]),(0,e._)("p",null,"所以，4 是第一个错误的版本。")],-1),c=(0,e.uE)('<h2 id="算法设计" tabindex="-1"><a class="header-anchor" href="#算法设计" aria-hidden="true">#</a> 算法设计</h2><p>分析可知此题可用二分搜索算法求解，我们需要找出出错的版本，借助bool isBadVersion(version)接口判断是否出错，分析可知有两种情况：</p><blockquote><ul><li><ol><li>假如isBadVersion(middle)返回false，则证明出错的版本在middle之后，则我们令left = middle + 1。</li></ol></li><li><ol start="2"><li>假如isBadVersion(middle)返回true，则证明出错的版本在middle之前（也包括可能第一个出错的版本就是middle），此时我们下次的查找范围就是[left , middle]。</li></ol></li></ul></blockquote><h3 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h3><p>最后的结果为：</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">// The API isBadVersion is defined for you.</span>\n<span class="token comment">// bool isBadVersion(int version);</span>\n\n<span class="token keyword">int</span> <span class="token function">firstBadVersion</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token keyword">int</span> right <span class="token operator">=</span> n<span class="token punctuation">;</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isBadVersion</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            right <span class="token operator">=</span> mid<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> left<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="复杂性分析" tabindex="-1"><a class="header-anchor" href="#复杂性分析" aria-hidden="true">#</a> 复杂性分析</h3><p>时间复杂度：O(logn)。搜索空间每次减少一半，因此时间复杂度为O(logn)。 空间复杂度：O(1)。</p><h3 id="思考" tabindex="-1"><a class="header-anchor" href="#思考" aria-hidden="true">#</a> 思考</h3><blockquote><ul><li>1.假如就是middle是第一出错的，有什么改进可以快速找到错误版本的方式吗？ 提示：middle出错的话，前一个版本就是正确的。</li></ul></blockquote>',10),u={},d=(0,a(3744).Z)(u,[["render",function(n,s){return(0,e.wg)(),(0,e.iD)(e.HY,null,[t,l,p,o,i,r,c],64)}]])}}]);