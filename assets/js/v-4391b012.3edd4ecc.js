"use strict";(self.webpackChunkafternoon_grocery_store=self.webpackChunkafternoon_grocery_store||[]).push([[9010],{7821:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-4391b012",path:"/blogs/PCCNotes/20210521Qsort.html",title:"qsort函数使用方法简介",lang:"zh-CN",frontmatter:{title:"qsort函数使用方法简介",date:"2021-05-21T00:00:00.000Z",tags:["笔记","排序"],categories:["算法笔记"]},excerpt:"",headers:[{level:2,title:"背景",slug:"背景",children:[]},{level:2,title:"介绍",slug:"介绍",children:[]},{level:2,title:"补充",slug:"补充",children:[]}],git:{createdTime:1642079704e3,updatedTime:1642079704e3,contributors:[{name:"shinuyeim",email:"shinuyemail@gmail.com",commits:1}]}}},4646:(n,s,a)=>{a.r(s),a.d(s,{default:()=>k});var p=a(6252);const e=(0,p.uE)('<h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景" aria-hidden="true">#</a> 背景</h2><p>我们在编程的时候时常会使用到排序算法，库函数这时候就给我们很大的帮助，在需要排序算法时，我们可以引用qsort函数实现快速排序。</p><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h2><p>功能：使用快速排序例程进行排序<br> 头文件：stdlib.h<br> 用法：void qsort(void* base,size_t num,size_t width,int(__cdecl<em>compare)(const void</em>,const void*));<br> 参数：</p><ol><li>待排序数组，排序之后的结果仍放在这个数组中</li><li>数组中待排序元素数量</li><li>各元素的占用空间大小（单位为字节）</li><li>指向函数的指针，用于确定排序的顺序（需要用户自定义一个比较函数）</li></ol><p>qsort要求提供一个自己定义的比较函数。比较函数使得qsort通用性更好，有了比较函数qsort可以实现对数组、字符串、结构体等结构进行升序或降序排序。</p><p>以整型为例：</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span><span class="token operator">*</span> pa <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>a<span class="token punctuation">;</span>\n    <span class="token keyword">int</span><span class="token operator">*</span> pb <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>b<span class="token punctuation">;</span>\n    <span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token operator">*</span>pa<span class="token punctuation">;</span>\n    <span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token operator">*</span>pb<span class="token punctuation">;</span>\n    <span class="token keyword">return</span> num1 <span class="token operator">-</span> num2<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>可见，参数列表是两个空指针，现在他要去指向你的数组元素。所以转换为你当前的类型，然后取值。默认升序排列(从小到大)，如果想降序排列返回*b-*a即可。</p><p>其他类型的用法分别为： 对char型数组排序（同int类型）：</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">cmp_char</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> a <span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> b<span class="token punctuation">)</span>　\n<span class="token punctuation">{</span>\n    <span class="token keyword">char</span><span class="token operator">*</span> a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>a<span class="token punctuation">;</span>    \n    <span class="token keyword">char</span><span class="token operator">*</span> b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>b<span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token operator">*</span>a <span class="token operator">-</span> <span class="token operator">*</span>b<span class="token punctuation">;</span>　　\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>对double型数组排序：</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">cmp_double</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> a <span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> b<span class="token punctuation">)</span>　　\n<span class="token punctuation">{</span>   \n    <span class="token keyword">double</span><span class="token operator">*</span> pa <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token operator">*</span><span class="token punctuation">)</span>a<span class="token punctuation">;</span>\n    <span class="token keyword">double</span><span class="token operator">*</span> pb <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token operator">*</span><span class="token punctuation">)</span>b<span class="token punctuation">;</span>\n    <span class="token keyword">double</span> num1 <span class="token operator">=</span> <span class="token operator">*</span>pa<span class="token punctuation">;</span>\n    <span class="token keyword">double</span> num2 <span class="token operator">=</span> <span class="token operator">*</span>pb<span class="token punctuation">;</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>num1 <span class="token operator">-</span> num2 <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">//return *a &gt; *b ? 1 : -1;　  //特别注意</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div>',13),o=(0,p._)("div",{class:"custom-container tip"},[(0,p._)("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[(0,p._)("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[(0,p._)("circle",{cx:"12",cy:"12",r:"9"}),(0,p._)("path",{d:"M12 8h.01"}),(0,p._)("path",{d:"M11 12h1v4h1"})])]),(0,p._)("p",{class:"custom-container-title"},"TIP"),(0,p._)("p",null,"在对浮点或者double型的一定要用三目运算符或者使用分支循环，因为要是使用像整型那样相减的话，如果是两个很接近的数则可能返回一个很小的小数（大于-1，小于1），而cmp的返回值是int型，因此会将这个小数返回0，系统认为是相等，失去了本来存在的大小关系")],-1),t=(0,p.uE)('<p>对字符串进行排序：</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">cmp_string</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> a <span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span> b<span class="token punctuation">)</span>　　\n<span class="token punctuation">{</span>\n    <span class="token keyword">char</span><span class="token operator">*</span> a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>a<span class="token punctuation">;</span>　　\n    <span class="token keyword">char</span><span class="token operator">*</span> b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>b<span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="补充" tabindex="-1"><a class="header-anchor" href="#补充" aria-hidden="true">#</a> 补充</h2>',3),c=(0,p.Uk)("对于qsort函数的具体使用方法只需要能够正确使用就可以，对于qsort函数的具体使用方法可以参考一个B站的视频，"),l={href:"https://www.bilibili.com/video/BV1Nx411D7sU?from=search&seid=15615973409899341026",target:"_blank",rel:"noopener noreferrer"},r=(0,p.Uk)("qsort函数的使用方法"),u=(0,p.Uk)("。"),i={},k=(0,a(3744).Z)(i,[["render",function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[e,o,t,(0,p._)("p",null,[c,(0,p._)("a",l,[r,(0,p.Wm)(a)]),u])],64)}]])}}]);