"use strict";(self.webpackChunkafternoon_grocery_store=self.webpackChunkafternoon_grocery_store||[]).push([[4473],{6550:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e={key:"v-346f6c64",path:"/blogs/LeetCode/2020/7-28-69TheSquareRootOfX.html",title:"x的平方根",lang:"zh-CN",frontmatter:{title:"x的平方根",date:"2020-07-28T00:00:00.000Z",tags:["简单","力扣"],categories:["算法笔记"]},excerpt:"",headers:[{level:2,title:"题目描述",slug:"题目描述",children:[]},{level:2,title:"示例1：",slug:"示例1",children:[]},{level:2,title:"示例2：",slug:"示例2",children:[]},{level:2,title:"题目分析",slug:"题目分析",children:[{level:3,title:"算法设计",slug:"算法设计",children:[]},{level:3,title:"代码",slug:"代码",children:[]}]}],git:{createdTime:1642079704e3,updatedTime:1642079704e3,contributors:[{name:"shinuyeim",email:"shinuyemail@gmail.com",commits:1}]}}},1054:(n,a,s)=>{s.r(a),s.d(a,{default:()=>i});var e=s(6252);const p=(0,e.uE)('<h2 id="题目描述" tabindex="-1"><a class="header-anchor" href="#题目描述" aria-hidden="true">#</a> 题目描述</h2><p>实现 [^int sqrt(int x)] 函数</p><p>计算并返回 x 的平方根，其中 x 是非负整数。</p><p>由于返回类型是整数，结果只保留整数的部分，小数部分将被舍去。</p><h2 id="示例1" tabindex="-1"><a class="header-anchor" href="#示例1" aria-hidden="true">#</a> 示例1：</h2><blockquote><p>输入: 4<br> 输出: 2</p></blockquote><h2 id="示例2" tabindex="-1"><a class="header-anchor" href="#示例2" aria-hidden="true">#</a> 示例2：</h2><blockquote><p>输入: 8<br> 输出: 2<br> 说明: 8 的平方根是 2.82842...,由于返回类型是整数，小数部分将被舍去</p></blockquote><h2 id="题目分析" tabindex="-1"><a class="header-anchor" href="#题目分析" aria-hidden="true">#</a> 题目分析</h2><p>一般得高级语言都会有可直接使用得库函数用来求平方根，但是现在我们不直接使用可以直接求得平方根得函数，来求解一个数字的平方根的整数部分。</p><h3 id="算法设计" tabindex="-1"><a class="header-anchor" href="#算法设计" aria-hidden="true">#</a> 算法设计</h3><p>我们知道4的平方根是2，8的平方根是2.82842... ，那么我们要求得一个数的平方根，其实只需要找到哪个数字乘于两次等于它本身，对于像8，10，11这些平方根不是一个整数的数，我们只需找到那个乘起来不大于但是要是加一后能大于本身的那个整数就是我们需要的结果，利用类似二分搜索的方法，我们可以快速的找到我们想要的结果。</p><h3 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">mySqrt</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token operator">=</span>x<span class="token punctuation">;</span>\n        <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>\n        <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span>mid<span class="token operator">==</span>x<span class="token operator">/</span>mid<span class="token punctuation">)</span>\n                <span class="token keyword">return</span> mid<span class="token punctuation">;</span>\n            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>mid<span class="token operator">&gt;</span>x<span class="token operator">/</span>mid<span class="token punctuation">)</span>\n                r<span class="token operator">=</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n            <span class="token keyword">else</span>\n                l<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>\n            mid<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> mid<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h4 id="时间复杂度" tabindex="-1"><a class="header-anchor" href="#时间复杂度" aria-hidden="true">#</a> 时间复杂度</h4>',15),t=(0,e.Uk)("这个算法看起来是不是和二分搜索法很相似，"),o={href:"https://shinuyeim.github.io/shinuye-site/views/PCCNotes/092901.html#%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2%E6%B3%95",target:"_blank",rel:"noopener noreferrer"},r=(0,e.Uk)("二分法查找以及改进"),l=(0,e.Uk)("。 时间复杂度和二分搜索一致，复杂度：O(logn)."),c={},i=(0,s(3744).Z)(c,[["render",function(n,a){const s=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[p,(0,e._)("p",null,[t,(0,e._)("a",o,[r,(0,e.Wm)(s)]),l])],64)}]])}}]);