"use strict";(self.webpackChunkafternoon_grocery_store=self.webpackChunkafternoon_grocery_store||[]).push([[7124],{8940:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-34a68410",path:"/blogs/LeetCode/2020/11-08-1351TheNegativeNumberInTheStatisticallyOrderedMatrix.html",title:"统计有序矩阵中的负数",lang:"zh-CN",frontmatter:{title:"统计有序矩阵中的负数",date:"2020-11-08T00:00:00.000Z",tags:["简单","力扣","二分搜索"],categories:["算法笔记"]},excerpt:"",headers:[{level:2,title:"题目描述",slug:"题目描述",children:[]},{level:2,title:"示例",slug:"示例",children:[]},{level:2,title:"算法设计",slug:"算法设计",children:[{level:3,title:"代码(二分查找)",slug:"代码-二分查找",children:[]},{level:3,title:"复杂性分析(暴力法)",slug:"复杂性分析-暴力法",children:[]},{level:3,title:"代码(我的想法)",slug:"代码-我的想法",children:[]},{level:3,title:"解释",slug:"解释",children:[]}]}],git:{createdTime:1642079704e3,updatedTime:1642079704e3,contributors:[{name:"shinuyeim",email:"shinuyemail@gmail.com",commits:1}]}}},7928:(n,s,a)=>{a.r(s),a.d(s,{default:()=>u});var p=a(6252);const e=(0,p._)("h2",{id:"题目描述",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#题目描述","aria-hidden":"true"},"#"),(0,p.Uk)(" 题目描述")],-1),t=(0,p._)("p",null,"给你一个 m * n 的矩阵 grid，矩阵中的元素无论是按行还是按列，都以非递增顺序排列。",-1),o=(0,p._)("p",null,"请你统计并返回 grid 中 负数 的数目。",-1),l=(0,p._)("h2",{id:"示例",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#示例","aria-hidden":"true"},"#"),(0,p.Uk)(" 示例")],-1),c=(0,p._)("div",{class:"custom-container tip"},[(0,p._)("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[(0,p._)("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[(0,p._)("circle",{cx:"12",cy:"12",r:"9"}),(0,p._)("path",{d:"M12 8h.01"}),(0,p._)("path",{d:"M11 12h1v4h1"})])]),(0,p._)("p",{class:"custom-container-title"},"TIP"),(0,p._)("p",null,[(0,p.Uk)("输入：grid = [[4,3,2,-1],[3,2,1,-1],[1,1,-1,-2],[-1,-1,-2,-3]]"),(0,p._)("br"),(0,p.Uk)(" 输出：8"),(0,p._)("br"),(0,p.Uk)(" 解释：矩阵中共有 8 个负数。")]),(0,p._)("p",null,[(0,p.Uk)("输入：grid = [[3,2],[1,0]]"),(0,p._)("br"),(0,p.Uk)(" 输出：0")]),(0,p._)("p",null,[(0,p.Uk)("输入：grid = [[1,-1],[-1,-1]]"),(0,p._)("br"),(0,p.Uk)(" 输出：3")]),(0,p._)("p",null,[(0,p.Uk)("输入：grid = [[-1]]"),(0,p._)("br"),(0,p.Uk)(" 输出：1")])],-1),r=(0,p.uE)('<h2 id="算法设计" tabindex="-1"><a class="header-anchor" href="#算法设计" aria-hidden="true">#</a> 算法设计</h2><p>注意到题目中给了一个性质，即矩阵中的元素无论是按行还是按列，都以非递增顺序排列，可以考虑把这个性质利用起来优化暴力。已知这个性质告诉了我们每一行的数都是有序的，所以我们通过二分查找可以找到每一行中从前往后的第一个负数，那么这个位置之后到这一行的末尾里所有的数必然是负数了，可以直接统计。</p><p>1.遍历矩阵的每一行。</p><p>2.二分查找到该行从前往后的第一个负数，考虑第i行，我们记这个位置为posi，那么第i行 [ posi , m-1]中的所有数都是负数，所以这一行对答案的贡献就是 m-1-posi+1 = m-posi。</p><h3 id="代码-二分查找" tabindex="-1"><a class="header-anchor" href="#代码-二分查找" aria-hidden="true">#</a> 代码(二分查找)</h3><p>最后的结果为：</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">countNegatives</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> grid<span class="token punctuation">,</span> <span class="token keyword">int</span> gridSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> gridColSize<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>gridSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&lt;</span><span class="token operator">*</span>gridColSize <span class="token operator">&amp;&amp;</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            count<span class="token operator">++</span><span class="token punctuation">;</span>\n            j<span class="token operator">++</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        num<span class="token operator">+=</span><span class="token punctuation">(</span><span class="token operator">*</span>gridColSize<span class="token operator">-</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> num<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="复杂性分析-暴力法" tabindex="-1"><a class="header-anchor" href="#复杂性分析-暴力法" aria-hidden="true">#</a> 复杂性分析(暴力法)</h3><p>时间复杂度： O(log2n) 。为二分查找的时间复杂度。 空间复杂度： O(1) 。没有使用额外的空间。</p><h3 id="代码-我的想法" tabindex="-1"><a class="header-anchor" href="#代码-我的想法" aria-hidden="true">#</a> 代码(我的想法)</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">countNegatives</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> grid<span class="token punctuation">,</span> <span class="token keyword">int</span> gridSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> gridColSize<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token operator">*</span>gridColSize<span class="token punctuation">;</span>\n    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> gridSize<span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token operator">*</span>gridColSize<span class="token punctuation">;</span>j <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                num <span class="token operator">=</span> <span class="token operator">*</span>gridColSize <span class="token operator">-</span> j<span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        num <span class="token operator">=</span> num <span class="token operator">+</span> num<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> num<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="解释" tabindex="-1"><a class="header-anchor" href="#解释" aria-hidden="true">#</a> 解释</h3><p>元素都是非递增排序的，所以从每一行的后面判断，找到第一个大于等于0的数，用这一行的总长度减去这个数的位置就是这一行中负数的个数，然后一行一行的循环判断。但是给的参数限制，这个方法暂时没有成功。不过稍微改进，应该还是可以成功通过的。</p>',13),i={},u=(0,a(3744).Z)(i,[["render",function(n,s){return(0,p.wg)(),(0,p.iD)(p.HY,null,[e,t,o,l,c,r],64)}]])}}]);