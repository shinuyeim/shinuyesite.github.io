"use strict";(self.webpackChunkafternoon_grocery_store=self.webpackChunkafternoon_grocery_store||[]).push([[4911],{9215:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-6940ef64",path:"/blogs/PCCNotes/102601.html",title:"排列问题",lang:"zh-CN",frontmatter:{title:"排列问题",date:"2020-10-26T00:00:00.000Z",tags:["笔记","递归与分治"],categories:["算法笔记"]},excerpt:"",headers:[{level:2,title:"题目描述",slug:"题目描述",children:[]},{level:2,title:"算法设计",slug:"算法设计",children:[{level:3,title:"数据输入",slug:"数据输入",children:[]},{level:3,title:"结果输出",slug:"结果输出",children:[]}]},{level:2,title:"代码",slug:"代码",children:[{level:3,title:"复杂性分析",slug:"复杂性分析",children:[]},{level:3,title:"思考",slug:"思考",children:[]}]}],git:{createdTime:1642079704e3,updatedTime:1642079704e3,contributors:[{name:"shinuyeim",email:"shinuyemail@gmail.com",commits:1}]}}},1200:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const p=(0,a(6252).uE)('<h2 id="题目描述" tabindex="-1"><a class="header-anchor" href="#题目描述" aria-hidden="true">#</a> 题目描述</h2><p>设R = {r<sub>1</sub> ,r<sub>2</sub>, ... ,r<sub>n</sub>}是要进行排列的n个元素，R<sub>i</sub>= R - {r<sub>i</sub>}设计一个算法，列出R的所有不同排列。集合中元素的全排列记为 Perm(X)。(r<sub>i</sub>)Perm(X)表示在全排列Perm(X)的每个排列前加上前缀r<sub>i</sub>得到的排列。</p><h2 id="算法设计" tabindex="-1"><a class="header-anchor" href="#算法设计" aria-hidden="true">#</a> 算法设计</h2><p>R的全排列可以归纳定义如下：</p><blockquote><ul><li>当 n = 1时，Perm(R) = (r), 其中r是集合R中唯一的元素；</li><li>当 n &gt; 1时，Perm(R)由(r<sub>1</sub>)Perm(R<sub>1</sub>),(r<sub>2</sub>)Perm(R<sub>2</sub>),...,(r<sub>n</sub>)Perm(R<sub>n</sub>)构成。</li></ul></blockquote><p>依此递归定义，可设计产生Perm(R)的递归算法如下：</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">Perm</span><span class="token punctuation">(</span><span class="token keyword">int</span> list<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t<span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">==</span> m<span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t\t<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t\t\t<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span>\n\t\t<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> k<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t\t<span class="token function">Swap</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token function">Perm</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> k<span class="token operator">+</span><span class="token number">1</span> <span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token function">Swap</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Swap函数的功能是对数字进行交换 </span>\n<span class="token keyword">void</span> <span class="token function">Swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t<span class="token keyword">int</span> temp <span class="token operator">=</span> a<span class="token punctuation">;</span>\n\ta <span class="token operator">=</span> b<span class="token punctuation">;</span>\n\tb <span class="token operator">=</span> temp<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>算法Perm(list , k, m)递归产生所有前缀是list[0:k-1]，且后缀是list[k:m]的全排列的所有排列。函数调用Perm(list ,0 ,n -1)则产生list[0:n-1]的全排列。<br> 在一般情况下，k &lt; m。算法将list[k:m]中的每个元素分别与list[k]中的元素交换，然后递归地计算list[k+1:m]的全排列，并将计算结果作为list[0:k]的后缀。算法中Swap()是用于交换两个变量值得内联函数。</p><h3 id="数据输入" tabindex="-1"><a class="header-anchor" href="#数据输入" aria-hidden="true">#</a> 数据输入</h3><p>输入数据由文件名为input.txt的文本提供。文件的第一行是一个正整数k，表示接下来有k行。在接下来的k行中，每行给出一个字符串。</p><h3 id="结果输出" tabindex="-1"><a class="header-anchor" href="#结果输出" aria-hidden="true">#</a> 结果输出</h3><p>将计算结果输出到文件output.txt。文件有k行，每行对应一个字符串的编码。</p><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><p>最后的结果为：</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>\n\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">N</span> <span class="token expression"><span class="token number">100000</span></span></span>\n\n<span class="token keyword">void</span> <span class="token function">Perm</span><span class="token punctuation">(</span><span class="token keyword">int</span> list<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">int</span> <span class="token function">ok</span><span class="token punctuation">(</span><span class="token keyword">int</span> list<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">void</span> <span class="token function">Swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t\n\t<span class="token keyword">int</span> list<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\t<span class="token keyword">int</span> size<span class="token punctuation">;</span>\n\n\t<span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">&quot;D:\\\\input.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       \n\t<span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">&quot;D:\\\\output.txt&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;w&quot;</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\n\t<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">{</span>\n\t\t<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\t\n\t<span class="token function">Perm</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> size <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\n\t<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">void</span> <span class="token function">Perm</span><span class="token punctuation">(</span><span class="token keyword">int</span> list<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t<span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">==</span> m<span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t\t<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t\t\t<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span>\n\t\t<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> k<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t\t<span class="token function">Swap</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token function">Perm</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> k<span class="token operator">+</span><span class="token number">1</span> <span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token function">Swap</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Swap函数的功能是对数字进行交换 </span>\n<span class="token keyword">void</span> <span class="token function">Swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t<span class="token keyword">int</span> temp <span class="token operator">=</span> a<span class="token punctuation">;</span>\n\ta <span class="token operator">=</span> b<span class="token punctuation">;</span>\n\tb <span class="token operator">=</span> temp<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br></div></div><h3 id="复杂性分析" tabindex="-1"><a class="header-anchor" href="#复杂性分析" aria-hidden="true">#</a> 复杂性分析</h3><h3 id="思考" tabindex="-1"><a class="header-anchor" href="#思考" aria-hidden="true">#</a> 思考</h3><blockquote><ul><li>1.这个算法的复杂度是怎么样的？如何分析。</li></ul></blockquote>',18),t={},e=(0,a(3744).Z)(t,[["render",function(n,s){return p}]])}}]);