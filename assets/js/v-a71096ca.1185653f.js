"use strict";(self.webpackChunkafternoon_grocery_store=self.webpackChunkafternoon_grocery_store||[]).push([[9122],{2890:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-a71096ca",path:"/blogs/LeetCode/2021/2021-05-30-441ArrangeTheCoin.html",title:"排列硬币",lang:"zh-CN",frontmatter:{title:"排列硬币",date:"2021-05-30T00:00:00.000Z",tags:["简单","力扣","二分搜索"],categories:["算法笔记"]},excerpt:"",headers:[{level:2,title:"题目描述",slug:"题目描述",children:[]},{level:2,title:"示例",slug:"示例",children:[]},{level:2,title:"算法设计",slug:"算法设计",children:[]},{level:2,title:"代码",slug:"代码",children:[]},{level:2,title:"复杂度分析",slug:"复杂度分析",children:[]}],git:{createdTime:1642079704e3,updatedTime:1642079704e3,contributors:[{name:"shinuyeim",email:"shinuyemail@gmail.com",commits:1}]}}},6750:(n,s,a)=>{a.r(s),a.d(s,{default:()=>k});var p=a(6252);const t=(0,p._)("h2",{id:"题目描述",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#题目描述","aria-hidden":"true"},"#"),(0,p.Uk)(" 题目描述")],-1),e=(0,p._)("p",null,"你总共有 n 枚硬币，你需要将它们摆成一个阶梯形状，第 k 行就必须正好有 k 枚硬币。",-1),o=(0,p._)("p",null,"给定一个数字 n，找出可形成完整阶梯行的总行数。",-1),l=(0,p._)("p",null,"n 是一个非负整数，并且在32位有符号整型的范围内。",-1),c=(0,p._)("h2",{id:"示例",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#示例","aria-hidden":"true"},"#"),(0,p.Uk)(" 示例")],-1),r=(0,p._)("div",{class:"custom-container tip"},[(0,p._)("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[(0,p._)("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[(0,p._)("circle",{cx:"12",cy:"12",r:"9"}),(0,p._)("path",{d:"M12 8h.01"}),(0,p._)("path",{d:"M11 12h1v4h1"})])]),(0,p._)("p",{class:"custom-container-title"},"TIP"),(0,p._)("p",null,"n = 5"),(0,p._)("p",null,[(0,p.Uk)("硬币可排列成以下几行:"),(0,p._)("br"),(0,p.Uk)(" ¤"),(0,p._)("br"),(0,p.Uk)(" ¤ ¤"),(0,p._)("br"),(0,p.Uk)(" ¤ ¤")]),(0,p._)("p",null,"因为第三行不完整，所以返回2."),(0,p._)("p",null,"n = 8"),(0,p._)("p",null,[(0,p.Uk)("硬币可排列成以下几行:"),(0,p._)("br"),(0,p.Uk)(" ¤"),(0,p._)("br"),(0,p.Uk)(" ¤ ¤"),(0,p._)("br"),(0,p.Uk)(" ¤ ¤ ¤"),(0,p._)("br"),(0,p.Uk)(" ¤ ¤")]),(0,p._)("p",null,"因为第四行不完整，所以返回3."),(0,p._)("p",null,"n = 6"),(0,p._)("p",null,[(0,p.Uk)("硬币可排列成以下几行: ¤"),(0,p._)("br"),(0,p.Uk)(" ¤ ¤"),(0,p._)("br"),(0,p.Uk)(" ¤ ¤ ¤"),(0,p._)("br"),(0,p.Uk)(" 返回3.")])],-1),u=(0,p.uE)('<h2 id="算法设计" tabindex="-1"><a class="header-anchor" href="#算法设计" aria-hidden="true">#</a> 算法设计</h2><p>这个题在LeetCode里面的标签是简单的二分搜索，当我读完题目的时候，还没有想到用二分法如何求解，但是我想到了一种相对暴力的解法，于是就写了一段，调试了几次通过了。具体代码如下暴力法1。因为对于二分法没有思路，所以我去搜索了一下，结果看到一个更加直观的暴力法，一看就能理解，对比于我的代码，可读性更好。所以我把另一个暴力法总结在暴力法2中。<br> 二分法主要利用到的就是等差数列求和这个性质，求和的过程要注意数据不能溢出，所以定义的时候使用了long型。</p><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><p><strong>暴力法1：</strong></p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">arrangeCoins</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\t<span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\tn <span class="token operator">=</span> n <span class="token operator">-</span> i<span class="token punctuation">;</span>  <span class="token comment">//每一行都需要减去当前行数个硬币</span>\n\t\ti<span class="token operator">++</span><span class="token punctuation">;</span>\t\t<span class="token comment">//行数加1</span>\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//特例，刚好最后一行放完所有的硬币，如6个硬币的时候，能放3行</span>\n\t\t\ti<span class="token operator">++</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">return</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><hr><p><strong>暴力法2：</strong></p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">arrangeCoin</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">//存储结果</span>\n\t<span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\tres<span class="token operator">++</span><span class="token punctuation">;</span>\n\t\tn <span class="token operator">=</span> n <span class="token operator">-</span> res<span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token comment">//刚好减完的话n=0，例如6-1-2-3 = 0 此时返回3</span>\n\t<span class="token comment">//当减完小于0，例如5-1-2-3 &lt; 0 此时返回2</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> res<span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">else</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> res <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><hr><p><strong>二分搜索：</strong></p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">arrangeCoins</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> n<span class="token punctuation">;</span>\n\t<span class="token keyword">long</span> mid<span class="token punctuation">,</span> sum<span class="token punctuation">;</span>\n\t<span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\tmid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>\n\t\t<span class="token comment">//等差数列求和</span>\n\t\tsum <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> mid<span class="token punctuation">)</span> <span class="token operator">*</span> mid <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>mid<span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span>\n\t\t<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\tleft <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span>\n\t\t<span class="token keyword">else</span> <span class="token punctuation">{</span>\n\t\t\tright <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">return</span> left <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><hr><h2 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h2><p><strong>时间复杂度：</strong><br> 暴力法中，提交时用时16ms，算法执行效率不高，时间复杂度为O(n)。<br> 二分搜索中，算法的时间复杂度为O(logn);</p><p><strong>空间复杂度：</strong><br> 暴力法中，也没有占用多余的内存，只是定义了一个变量，空间复杂度为O(1)。<br> 二分搜索中，空间复杂度为O(1);</p>',15),i={},k=(0,a(3744).Z)(i,[["render",function(n,s){return(0,p.wg)(),(0,p.iD)(p.HY,null,[t,e,o,l,c,r,u],64)}]])}}]);