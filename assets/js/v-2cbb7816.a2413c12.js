"use strict";(self.webpackChunkafternoon_grocery_store=self.webpackChunkafternoon_grocery_store||[]).push([[5078],{7627:(n,a,s)=>{s.r(a),s.d(a,{data:()=>p});const p={key:"v-2cbb7816",path:"/blogs/LeetCode/2020/8-01-20ValidParentheses.html",title:"有效的括号",lang:"zh-CN",frontmatter:{title:"有效的括号",date:"2020-08-01T00:00:00.000Z",tags:["简单","力扣"],categories:["算法笔记"]},excerpt:"",headers:[{level:2,title:"有效的括号",slug:"有效的括号",children:[]},{level:2,title:"示例1：",slug:"示例1",children:[]},{level:2,title:"示例2：",slug:"示例2",children:[]},{level:2,title:"示例3：",slug:"示例3",children:[]},{level:2,title:"示例4：",slug:"示例4",children:[]},{level:2,title:"示例5：",slug:"示例5",children:[]},{level:2,title:"代码",slug:"代码",children:[]},{level:2,title:"说明",slug:"说明",children:[{level:3,title:"HashMap的基本用法",slug:"hashmap的基本用法",children:[]}]}],git:{createdTime:1642079704e3,updatedTime:1642079704e3,contributors:[{name:"shinuyeim",email:"shinuyemail@gmail.com",commits:1}]}}},9410:(n,a,s)=>{s.r(a),s.d(a,{default:()=>e});const p=(0,s(6252).uE)('<h2 id="有效的括号" tabindex="-1"><a class="header-anchor" href="#有效的括号" aria-hidden="true">#</a> 有效的括号</h2><p>给定一个只包括 [^&#39;(&#39;],[^&#39;)&#39;],[^&#39;{&#39;],[^&#39;}&#39;],[^&#39;[&#39;],[^&#39;]&#39;] 的字符串，判断字符串是否有效。</p><p>有效字符串需满足：</p><blockquote><p>1.左括号必须用相同类型的右括号闭合。<br> 2.左括号必须以正确的顺序闭合。</p></blockquote><p>注意空字符串可被认为是有效字符串。</p><h2 id="示例1" tabindex="-1"><a class="header-anchor" href="#示例1" aria-hidden="true">#</a> 示例1：</h2><blockquote><p>输入: &quot;()&quot;<br> 输出: true</p></blockquote><h2 id="示例2" tabindex="-1"><a class="header-anchor" href="#示例2" aria-hidden="true">#</a> 示例2：</h2><blockquote><p>输入: &quot;()[]{}&quot;<br> 输出: true</p></blockquote><h2 id="示例3" tabindex="-1"><a class="header-anchor" href="#示例3" aria-hidden="true">#</a> 示例3：</h2><blockquote><p>输入: &quot;(]&quot;<br> 输出: false</p></blockquote><h2 id="示例4" tabindex="-1"><a class="header-anchor" href="#示例4" aria-hidden="true">#</a> 示例4：</h2><blockquote><p>输入: &quot;([)]&quot;<br> 输出: false</p></blockquote><h2 id="示例5" tabindex="-1"><a class="header-anchor" href="#示例5" aria-hidden="true">#</a> 示例5：</h2><blockquote><p>输入: &quot;{[]}&quot;<br> 输出: true</p></blockquote><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValid</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> s <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span><span class="token class-name">Character</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&#39;)&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;(&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&#39;]&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;[&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&#39;}&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;{&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">&gt;</span></span> brackets <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token operator">:</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">&#39;(&#39;</span> <span class="token operator">||</span> c<span class="token operator">==</span><span class="token string">&#39;[&#39;</span> <span class="token operator">||</span> c<span class="token operator">==</span><span class="token string">&#39;{&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n               brackets<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> \n            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n                <span class="token keyword">if</span><span class="token punctuation">(</span>brackets<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span> <span class="token operator">||</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token operator">!=</span> brackets<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> brackets<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h2 id="说明" tabindex="-1"><a class="header-anchor" href="#说明" aria-hidden="true">#</a> 说明</h2><h3 id="hashmap的基本用法" tabindex="-1"><a class="header-anchor" href="#hashmap的基本用法" aria-hidden="true">#</a> HashMap的基本用法</h3><h4 id="创建hashmap对象" tabindex="-1"><a class="header-anchor" href="#创建hashmap对象" aria-hidden="true">#</a> 创建HashMap对象</h4><blockquote><p>Map&lt;Character,Character&gt; map = new HashMap&lt;&gt;();</p></blockquote><h4 id="添加键值对" tabindex="-1"><a class="header-anchor" href="#添加键值对" aria-hidden="true">#</a> 添加键值对</h4><p>添加元素时，如果key已经存在，则返回旧value，并将新的value存到该key中；如果key不存在，则返回null</p><blockquote><p>1.hashMap.put(&quot;aa&quot;,1);<br> 2.hashMap.put(&quot;bb&quot;,2);<br> 3.hashMap.put(&quot;cc&quot;,3);</p></blockquote>',24),t={},e=(0,s(3744).Z)(t,[["render",function(n,a){return p}]])}}]);