"use strict";(self.webpackChunkafternoon_grocery_store=self.webpackChunkafternoon_grocery_store||[]).push([[3999],{9240:(n,e,s)=>{s.r(e),s.d(e,{data:()=>l});const l={key:"v-711133dc",path:"/blogs/LeetCode/2020/10-20-01153.html",title:"寻找旋转排序数组中的最小值",lang:"zh-CN",frontmatter:{title:"寻找旋转排序数组中的最小值",date:"2020-10-20T00:00:00.000Z",tags:["简单","力扣"],categories:["算法笔记"]},excerpt:"",headers:[{level:2,title:"题目描述",slug:"题目描述",children:[{level:3,title:"示例1:",slug:"示例1",children:[]},{level:3,title:"示例2:",slug:"示例2",children:[]}]},{level:2,title:"题目分析",slug:"题目分析",children:[{level:3,title:"算法设计",slug:"算法设计",children:[]},{level:3,title:"代码",slug:"代码",children:[]},{level:3,title:"时间复杂度",slug:"时间复杂度",children:[]}]}],git:{createdTime:1642079704e3,updatedTime:1642079704e3,contributors:[{name:"shinuyeim",email:"shinuyemail@gmail.com",commits:1}]}}},6722:(n,e,s)=>{s.r(e),s.d(e,{default:()=>h});var l=s(6252);const a=(0,l._)("h2",{id:"题目描述",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#题目描述","aria-hidden":"true"},"#"),(0,l.Uk)(" 题目描述")],-1),r=(0,l._)("p",null,[(0,l.Uk)("假设按照升序排序的数组在预先未知的某个点上进行了旋转。 ( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。"),(0,l._)("br"),(0,l.Uk)(" 请找出其中最小的元素。"),(0,l._)("br"),(0,l.Uk)(" 你可以假设数组中不存在重复元素。")],-1),i=(0,l._)("h3",{id:"示例1",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#示例1","aria-hidden":"true"},"#"),(0,l.Uk)(" 示例1:")],-1),t=(0,l._)("div",{class:"custom-container tip"},[(0,l._)("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[(0,l._)("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[(0,l._)("circle",{cx:"12",cy:"12",r:"9"}),(0,l._)("path",{d:"M12 8h.01"}),(0,l._)("path",{d:"M11 12h1v4h1"})])]),(0,l._)("p",{class:"custom-container-title"},"TIP"),(0,l._)("p",null,"输入: [3,4,5,1,2] 输出: 1")],-1),u=(0,l._)("h3",{id:"示例2",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#示例2","aria-hidden":"true"},"#"),(0,l.Uk)(" 示例2:")],-1),c=(0,l._)("div",{class:"custom-container tip"},[(0,l._)("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[(0,l._)("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[(0,l._)("circle",{cx:"12",cy:"12",r:"9"}),(0,l._)("path",{d:"M12 8h.01"}),(0,l._)("path",{d:"M11 12h1v4h1"})])]),(0,l._)("p",{class:"custom-container-title"},"TIP"),(0,l._)("p",null,"输入: [4,5,6,7,0,1,2] 输出: 0")],-1),o=(0,l._)("h2",{id:"题目分析",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#题目分析","aria-hidden":"true"},"#"),(0,l.Uk)(" 题目分析")],-1),p=(0,l._)("p",null,"这是一个特殊处理的排序的数组，从某一个位置截取一部分到原数组的末尾。原数组是升序有序的数组我们暂时设为a数组赋值为[1, 2, 3, 4, 5, 6, 7]，如果数组没有旋转，数组的前一位总是小于后一位。因为数组是升序且没有重复元素的。我们只需判断数组的第一个元素和最后一个元素的大小关系，就可以判断出数组是否是旋转数组。设数组的第一位元素序列为left，最后一位元素序列为right，若a[left] < a[right]，则证明数组没有旋转，则第一个数字就是最小的值，若a[left] > a[right]，则表明数组旋转了。在旋转数组中我们可以寻找到一个变化的点， 我们称这个点为变化点。",-1),d=(0,l._)("div",{class:"custom-container tip"},[(0,l._)("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[(0,l._)("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[(0,l._)("circle",{cx:"12",cy:"12",r:"9"}),(0,l._)("path",{d:"M12 8h.01"}),(0,l._)("path",{d:"M11 12h1v4h1"})])]),(0,l._)("p",{class:"custom-container-title"},"TIP"),(0,l._)("p",null,"变化点左侧的元素 > 数组的第一个元素 变化点右侧的元素 < 数组的第一个元素")],-1),m=(0,l.uE)('<h3 id="算法设计" tabindex="-1"><a class="header-anchor" href="#算法设计" aria-hidden="true">#</a> 算法设计</h3><blockquote><ul><li>找到数组的中间元素 mid。</li></ul></blockquote><blockquote><ul><li>如果中间元素 &gt; 数组第一个元素，我们需要在 mid 右边搜索变化点。</li></ul></blockquote><blockquote><ul><li>如果中间元素 &lt; 数组第一个元素，我们需要在 mid 左边搜索变化点。</li></ul></blockquote><blockquote><ul><li>当我们找到变化点时停止搜索，当以下条件满足任意一个即可：</li></ul><blockquote><p>nums[mid] &gt; nums[mid + 1]，因此 mid+1 是最小值。</p></blockquote></blockquote><blockquote><blockquote><p>nums[mid - 1] &gt; nums[mid]，因此 mid 是最小值。</p></blockquote></blockquote><h3 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h3><div class="language-C ext-C line-numbers-mode"><pre class="language-C"><code>int findMin(int* nums, int numsSize){\n    \n    if (numsSize == 1) {\n      return nums[0];\n    }\n\n    int left = 0, right = numsSize - 1;\n\n    if (nums[right] &gt; nums[0]) {\n      return nums[0];\n    }\n    \n    while (right &gt;= left) {\n      int mid = left + (right - left) / 2;\n\n      if (nums[mid] &gt; nums[mid + 1]) {\n        return nums[mid + 1];\n      }\n\n      if (nums[mid - 1] &gt; nums[mid]) {\n        return nums[mid];\n      }\n      if (nums[mid] &gt; nums[0]) {\n        left = mid + 1;\n      } else {\n        right = mid - 1;\n      }\n    }\n    return -1;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><h3 id="时间复杂度" tabindex="-1"><a class="header-anchor" href="#时间复杂度" aria-hidden="true">#</a> 时间复杂度</h3><p>时间复杂度和二分法一样同为O(logn)。</p>',10),b={},h=(0,s(3744).Z)(b,[["render",function(n,e){return(0,l.wg)(),(0,l.iD)(l.HY,null,[a,r,i,t,u,c,o,p,d,m],64)}]])}}]);