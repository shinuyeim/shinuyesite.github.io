"use strict";(self.webpackChunkafternoon_grocery_store=self.webpackChunkafternoon_grocery_store||[]).push([[6001],{3534:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-460ad7ce",path:"/blogs/LeetCode/2020/11-08-374GuessTheSizeOfTheNumber.html",title:"猜数字大小",lang:"zh-CN",frontmatter:{title:"猜数字大小",date:"2020-11-08T00:00:00.000Z",tags:["简单","力扣","二分搜索"],categories:["算法笔记"]},excerpt:"",headers:[{level:2,title:"题目描述",slug:"题目描述",children:[]},{level:2,title:"示例",slug:"示例",children:[]},{level:2,title:"算法设计",slug:"算法设计",children:[{level:3,title:"代码(暴力法)",slug:"代码-暴力法",children:[]},{level:3,title:"复杂性分析(暴力法)",slug:"复杂性分析-暴力法",children:[]},{level:3,title:"代码(二分搜索法)",slug:"代码-二分搜索法",children:[]},{level:3,title:"复杂性分析(暴力法)",slug:"复杂性分析-暴力法-1",children:[]},{level:3,title:"代码(三分搜索法)",slug:"代码-三分搜索法",children:[]},{level:3,title:"复杂性分析",slug:"复杂性分析",children:[]}]},{level:2,title:"二分查找和三分查找的比较",slug:"二分查找和三分查找的比较",children:[]}],git:{createdTime:1642079704e3,updatedTime:1642079704e3,contributors:[{name:"shinuyeim",email:"shinuyemail@gmail.com",commits:1}]}}},9645:(n,s,a)=>{a.r(s),a.d(s,{default:()=>H});var e=a(6252),t=a(5723),l=a(1463),o=a(7631);const r=(0,e._)("h2",{id:"题目描述",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#题目描述","aria-hidden":"true"},"#"),(0,e.Uk)(" 题目描述")],-1),c=(0,e._)("p",null,"猜数字游戏的规则如下：",-1),p=(0,e._)("blockquote",null,[(0,e._)("ul",null,[(0,e._)("li",null,"每轮游戏，我都会从 1 到 n 随机选择一个数字。 请你猜选出的是哪个数字。"),(0,e._)("li",null,"如果你猜错了，我会告诉你，你猜测的数字比我选出的数字是大了还是小了。")])],-1),_=(0,e._)("p",null,"你可以通过调用一个预先定义好的接口 int guess(int num) 来获取猜测结果，返回值一共有 3 种可能的情况（-1，1 或 0）：",-1),k=(0,e._)("blockquote",null,[(0,e._)("ul",null,[(0,e._)("li",null,"-1：我选出的数字比你猜的数字小 pick < num"),(0,e._)("li",null,"1：我选出的数字比你猜的数字大 pick > num"),(0,e._)("li",null,"0：我选出的数字和你猜的数字一样。恭喜！你猜对了！pick == num")])],-1),u=(0,e._)("h2",{id:"示例",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#示例","aria-hidden":"true"},"#"),(0,e.Uk)(" 示例")],-1),i=(0,e._)("div",{class:"custom-container tip"},[(0,e._)("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[(0,e._)("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[(0,e._)("circle",{cx:"12",cy:"12",r:"9"}),(0,e._)("path",{d:"M12 8h.01"}),(0,e._)("path",{d:"M11 12h1v4h1"})])]),(0,e._)("p",{class:"custom-container-title"},"TIP"),(0,e._)("p",null,[(0,e.Uk)("输入：n = 10, pick = 6"),(0,e._)("br"),(0,e.Uk)(" 输出：6")]),(0,e._)("p",null,[(0,e.Uk)("输入：n = 1, pick = 1"),(0,e._)("br"),(0,e.Uk)(" 输出：1")]),(0,e._)("p",null,[(0,e.Uk)("输入：n = 2, pick = 1"),(0,e._)("br"),(0,e.Uk)(" 输出：1")]),(0,e._)("p",null,[(0,e.Uk)("输入：n = 2, pick = 2"),(0,e._)("br"),(0,e.Uk)(" 输出：2")])],-1),b=(0,e._)("p",null,"提示：",-1),m=(0,e._)("div",{class:"custom-container tip"},[(0,e._)("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[(0,e._)("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[(0,e._)("circle",{cx:"12",cy:"12",r:"9"}),(0,e._)("path",{d:"M12 8h.01"}),(0,e._)("path",{d:"M11 12h1v4h1"})])]),(0,e._)("p",{class:"custom-container-title"},"TIP"),(0,e._)("p",null,[(0,e.Uk)("1 <= n <= 231 - 1"),(0,e._)("br"),(0,e.Uk)(" 1 <= pick <= n")])],-1),U=(0,e._)("h2",{id:"算法设计",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#算法设计","aria-hidden":"true"},"#"),(0,e.Uk)(" 算法设计")],-1),d=(0,e._)("p",null,"使用暴力法，从1到n-1循环检查每一个数字，根据guess(int num) 来获取猜测结果，如果返回0，则代表猜对。但是暴力法会超出运算时间，所以我们用二分查找法。我们直接先检验中间数字，如果返回了-1，则证明猜测的数字小于答案要求的数字，则范围缩小到[middle + 1, right]，也就是令left = middle +1，相反，如果检验数字返回值为1，则证明猜测数字大于要求数字，范围应该在[left , middle - 1]。",-1),h=(0,e._)("p",null,"我们也可以三分法，具体的方法和二分法差不多。",-1),g=(0,e._)("h3",{id:"代码-暴力法",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#代码-暴力法","aria-hidden":"true"},"#"),(0,e.Uk)(" 代码(暴力法)")],-1),w=(0,e._)("p",null,"最后的结果为：",-1),f=(0,e._)("div",{class:"language-c ext-c line-numbers-mode"},[(0,e._)("pre",{class:"language-c"},[(0,e._)("code",null,[(0,e._)("span",{class:"token comment"},"/** \n * Forward declaration of guess API.\n * @param  num   your guess\n * @return \t     -1 if num is lower than the guess number\n *\t\t\t      1 if num is higher than the guess number\n *               otherwise return 0\n * int guess(int num);\n */"),(0,e.Uk)("\n\n"),(0,e._)("span",{class:"token keyword"},"int"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"guessNumber"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"int"),(0,e.Uk)(" n"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n\t"),(0,e._)("span",{class:"token keyword"},"for"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"int"),(0,e.Uk)(" i "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("i "),(0,e._)("span",{class:"token operator"},"<="),(0,e.Uk)(" n"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("i"),(0,e._)("span",{class:"token operator"},"++"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"if"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token function"},"guess"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("i"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"=="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" i"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" n"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br")])],-1),y=(0,e._)("h3",{id:"复杂性分析-暴力法",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#复杂性分析-暴力法","aria-hidden":"true"},"#"),(0,e.Uk)(" 复杂性分析(暴力法)")],-1),x=(0,e._)("p",null,"时间复杂度： O(n) 。我们从 1 到 n 扫描检查所有的数字。 空间复杂度： O(1) 。不需要使用额外空间。",-1),v=(0,e._)("h3",{id:"代码-二分搜索法",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#代码-二分搜索法","aria-hidden":"true"},"#"),(0,e.Uk)(" 代码(二分搜索法)")],-1),O=(0,e._)("p",null,"最后的结果为：",-1),T=(0,e._)("div",{class:"language-c ext-c line-numbers-mode"},[(0,e._)("pre",{class:"language-c"},[(0,e._)("code",null,[(0,e._)("span",{class:"token comment"},"/** \n * Forward declaration of guess API.\n * @param  num   your guess\n * @return \t     -1 if num is lower than the guess number\n *\t\t\t      1 if num is higher than the guess number\n *               otherwise return 0\n * int guess(int num);\n */"),(0,e.Uk)("\n\n"),(0,e._)("span",{class:"token keyword"},"int"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"guessNumber"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"int"),(0,e.Uk)(" n"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"int"),(0,e.Uk)(" left "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"int"),(0,e.Uk)(" right "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" n"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"while"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("left "),(0,e._)("span",{class:"token operator"},"<="),(0,e.Uk)(" right"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"int"),(0,e.Uk)(" middle "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" left "),(0,e._)("span",{class:"token operator"},"+"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("right "),(0,e._)("span",{class:"token operator"},"-"),(0,e.Uk)(" left"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"/"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"int"),(0,e.Uk)(" res "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"guess"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("middle"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("res "),(0,e._)("span",{class:"token operator"},"=="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" middle"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"else"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("res "),(0,e._)("span",{class:"token operator"},"<"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n            right "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" middle "),(0,e._)("span",{class:"token operator"},"-"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"else"),(0,e.Uk)("\n            left "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" middle "),(0,e._)("span",{class:"token operator"},"+"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"-"),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"19"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"20"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"21"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"22"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"23"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"24"),(0,e._)("br")])],-1),C=(0,e._)("h3",{id:"复杂性分析-暴力法-1",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#复杂性分析-暴力法-1","aria-hidden":"true"},"#"),(0,e.Uk)(" 复杂性分析(暴力法)")],-1),I=(0,e._)("p",null,"时间复杂度： O(log2n) 。为二分查找的时间复杂度。 空间复杂度： O(1) 。没有使用额外的空间。",-1),N=(0,e._)("h3",{id:"代码-三分搜索法",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#代码-三分搜索法","aria-hidden":"true"},"#"),(0,e.Uk)(" 代码(三分搜索法)")],-1),P=(0,e._)("p",null,"最后的结果为：",-1),M=(0,e._)("div",{class:"language-c ext-c line-numbers-mode"},[(0,e._)("pre",{class:"language-c"},[(0,e._)("code",null,[(0,e._)("span",{class:"token comment"},"/** \n * Forward declaration of guess API.\n * @param  num   your guess\n * @return \t     -1 if num is lower than the guess number\n *\t\t\t      1 if num is higher than the guess number\n *               otherwise return 0\n * int guess(int num);\n */"),(0,e.Uk)("\n\n"),(0,e._)("span",{class:"token keyword"},"int"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"guessNumber"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"int"),(0,e.Uk)(" n"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"int"),(0,e.Uk)(" left "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"int"),(0,e.Uk)(" right "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" n"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"while"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("left "),(0,e._)("span",{class:"token operator"},"<="),(0,e.Uk)(" right"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"int"),(0,e.Uk)(" mid1 "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" left "),(0,e._)("span",{class:"token operator"},"+"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("right "),(0,e._)("span",{class:"token operator"},"-"),(0,e.Uk)(" left"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"/"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"3"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"int"),(0,e.Uk)(" mid2 "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" right "),(0,e._)("span",{class:"token operator"},"-"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("right "),(0,e._)("span",{class:"token operator"},"-"),(0,e.Uk)(" left"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"/"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"3"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"int"),(0,e.Uk)(" res1 "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"guess"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("mid1"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"int"),(0,e.Uk)(" res2 "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"guess"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("mid2"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("res1 "),(0,e._)("span",{class:"token operator"},"=="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" mid1"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("res2 "),(0,e._)("span",{class:"token operator"},"=="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" mid2"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"else"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("res1 "),(0,e._)("span",{class:"token operator"},"<"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n            right "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" mid1 "),(0,e._)("span",{class:"token operator"},"-"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"else"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("res2 "),(0,e._)("span",{class:"token operator"},">"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n            left "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" mid2 "),(0,e._)("span",{class:"token operator"},"+"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"else"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n            left "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" mid1 "),(0,e._)("span",{class:"token operator"},"+"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n            right "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" mid2 "),(0,e._)("span",{class:"token operator"},"-"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"-"),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"19"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"20"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"21"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"22"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"23"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"24"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"25"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"26"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"27"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"28"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"29"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"30"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"31"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"32"),(0,e._)("br")])],-1),A=(0,e._)("h3",{id:"复杂性分析",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#复杂性分析","aria-hidden":"true"},"#"),(0,e.Uk)(" 复杂性分析")],-1),F=(0,e._)("p",null,"时间复杂度：O(log3n)。 空间复杂度：O(1)。",-1),j=(0,e._)("h2",{id:"二分查找和三分查找的比较",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#二分查找和三分查找的比较","aria-hidden":"true"},"#"),(0,e.Uk)(" 二分查找和三分查找的比较")],-1),q=(0,e._)("p",null,"看起来三分查找会比二分查找更快，但是为什么二分查找使用得更广泛？",-1),z=(0,e._)("p",null,"三分查找比二分查找效果要更差，下面的递归式求出了二分查找最坏情况下的渐近复杂度。",-1),B=(0,e._)("p",null,[(0,e._)("img",{src:t,alt:"二分查找最坏情况下的渐近时间复杂度"})],-1),Z=(0,e._)("p",null,[(0,e._)("img",{src:l,alt:"三分查找最坏情况下的渐近时间复杂度"})],-1),D=(0,e._)("p",null,[(0,e._)("img",{src:o,alt:"结果分析"})],-1),G={},H=(0,a(3744).Z)(G,[["render",function(n,s){return(0,e.wg)(),(0,e.iD)(e.HY,null,[r,c,p,_,k,u,i,b,m,U,d,h,g,w,f,y,x,v,O,T,C,I,N,P,M,A,F,j,q,z,B,Z,D],64)}]])},5723:(n,s,a)=>{n.exports=a.p+"assets/img/snipaste_2020_11_08_16_18_41.75ef59b4.png"},1463:(n,s,a)=>{n.exports=a.p+"assets/img/snipaste_2020_11_08_16_18_54.ab8fd095.png"},7631:(n,s,a)=>{n.exports=a.p+"assets/img/snipaste_2020_11_08_16_24_11.66640f72.png"}}]);