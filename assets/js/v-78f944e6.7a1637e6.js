"use strict";(self.webpackChunkafternoon_grocery_store=self.webpackChunkafternoon_grocery_store||[]).push([[8496],{3382:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-78f944e6",path:"/blogs/PCCNotes/111501.html",title:"最大子段和(三种算法)",lang:"zh-CN",frontmatter:{title:"最大子段和(三种算法)",date:"2020-11-15T00:00:00.000Z",tags:["笔记"],categories:["算法笔记"]},excerpt:"",headers:[{level:2,title:"题目描述",slug:"题目描述",children:[]},{level:2,title:"算法设计",slug:"算法设计",children:[{level:3,title:"穷举法",slug:"穷举法",children:[]},{level:3,title:"穷举法(改进)",slug:"穷举法-改进",children:[]},{level:3,title:"分治算法",slug:"分治算法",children:[]},{level:3,title:"动态规划",slug:"动态规划",children:[]}]}],git:{createdTime:1642079704e3,updatedTime:1642079704e3,contributors:[{name:"shinuyeim",email:"shinuyemail@gmail.com",commits:1}]}}},488:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const p=(0,a(6252).uE)('<h2 id="题目描述" tabindex="-1"><a class="header-anchor" href="#题目描述" aria-hidden="true">#</a> 题目描述</h2><p>给定由n个整数(可能是负整数)组成的序列a1,a2,...,an,求该序列的字段和的最大值。当所有整数为负整数时定义其最大子段和为0。依次定义，对于序列(-2,11,-4,13,-5,-2)，的最大字段和为20.</p><h2 id="算法设计" tabindex="-1"><a class="header-anchor" href="#算法设计" aria-hidden="true">#</a> 算法设计</h2><h3 id="穷举法" tabindex="-1"><a class="header-anchor" href="#穷举法" aria-hidden="true">#</a> 穷举法</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">MaxSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">int</span> sum <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    \t<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    \t\t<span class="token keyword">int</span> thissum <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>\n    \t\t<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>j<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>\n    \t\t\tthissum <span class="token operator">+=</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\t\t\t<span class="token keyword">if</span><span class="token punctuation">(</span>thissum <span class="token operator">&gt;</span> sum<span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t\t\t\tsum <span class="token operator">=</span> thissum<span class="token punctuation">;</span>\n\t\t\t<span class="token punctuation">}</span> \n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">return</span> sum<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>从这个算法的三个for循环可以看出，时间复杂度为O(n3)。</p><h3 id="穷举法-改进" tabindex="-1"><a class="header-anchor" href="#穷举法-改进" aria-hidden="true">#</a> 穷举法(改进)</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">MaxSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">int</span> sum <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    \t<span class="token keyword">int</span> thissum <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>\n    \t<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    \t\t\tthissum <span class="token operator">+=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\t\t\t<span class="token keyword">if</span><span class="token punctuation">(</span>thissum <span class="token operator">&gt;</span> sum<span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t\t\t\tsum <span class="token operator">=</span> thissum<span class="token punctuation">;</span>\n\t\t\t<span class="token punctuation">}</span> \n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">return</span> sum<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>改进后的算法的时间复杂度为O(n2)。避免了重复计算，节省了计算时间。</p><h3 id="分治算法" tabindex="-1"><a class="header-anchor" href="#分治算法" aria-hidden="true">#</a> 分治算法</h3><p>对于最大子段和这个问题我们可以使用分治法求解。<br> 如果将所给的序列a[1 : n]，分为长度相等的两段a[1 :n/2]和a[n/2+1 : n]，分别求出这两段的字段和，则a[1 : n]的最大习惯和有三种情况。<br> 1.a[1 : n]的最大字段和与a[1 :n/2]的最大字段和相同。 2.a[1 ：n]的最大子段和与a[n\\2+1 : n]的最大字段和相同。 3.a[i : n]的最大字段和需要跨分两段。<br> 1和2的情况可以用递归求解，对于3，需要分为两部分求解，两部分最大值加起来就是整个序列的最大字段和。</p><p>最后的结果为：</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">MaxSubSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t<span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\t<span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">==</span> right<span class="token punctuation">)</span>\n\t\tsum <span class="token operator">=</span> a<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> a<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\t<span class="token keyword">else</span><span class="token punctuation">{</span>\n\t\t<span class="token keyword">int</span> center <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">int</span> leftsum <span class="token operator">=</span> <span class="token function">MaxSubSum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>left<span class="token punctuation">,</span>center<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">int</span> rightsum <span class="token operator">=</span> <span class="token function">MaxSubSum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>center <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\n\t\t<span class="token keyword">int</span> s1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">int</span> lefts <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> center<span class="token punctuation">;</span> i<span class="token operator">&gt;=</span>left <span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t\t\tlefts <span class="token operator">+=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\t\t\t<span class="token keyword">if</span><span class="token punctuation">(</span>lefts <span class="token operator">&gt;</span> s1<span class="token punctuation">)</span>\n\t\t\t\ts1<span class="token operator">=</span>lefts<span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span>\n\t\t\n\t\t<span class="token keyword">int</span> s2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">int</span> rights <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> center<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>right <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t\t\trights <span class="token operator">+=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\t\t\t<span class="token keyword">if</span><span class="token punctuation">(</span>rights <span class="token operator">&gt;</span> s2<span class="token punctuation">)</span>\n\t\t\t\ts2<span class="token operator">=</span>rights<span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span>\n\t\t\n\t\tsum <span class="token operator">=</span> s1<span class="token operator">+</span>s2<span class="token punctuation">;</span>\n\t\t<span class="token keyword">if</span><span class="token punctuation">(</span>sum <span class="token operator">&lt;</span> leftsum<span class="token punctuation">)</span>\n\t\t\tsum <span class="token operator">=</span> leftsum<span class="token punctuation">;</span>\n\t\t<span class="token keyword">if</span><span class="token punctuation">(</span>sum <span class="token operator">&lt;</span> rightsum<span class="token punctuation">)</span>\n\t\t\tsum <span class="token operator">=</span> rightsum<span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">return</span> sum<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">int</span> <span class="token function">MaxSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> <span class="token function">MaxSubSum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><p>该算法所需的计算时间满足典型分治算法递归式。时间复杂度为O(nlogn)。</p><h3 id="动态规划" tabindex="-1"><a class="header-anchor" href="#动态规划" aria-hidden="true">#</a> 动态规划</h3><p>动态规划求解最大子段和的算法如下：</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">MaxSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\t<span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\t<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> i<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t\t<span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>\n\t\t\tb <span class="token operator">+=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">else</span>\n\t\t\tb <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">&gt;</span> sum<span class="token punctuation">)</span>\n\t\t\tsum <span class="token operator">=</span> b<span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">return</span> sum<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>时间复杂度和空间复杂度均为O(n)。</p>',18),t={},e=(0,a(3744).Z)(t,[["render",function(n,s){return p}]])}}]);