"use strict";(self.webpackChunkafternoon_grocery_store=self.webpackChunkafternoon_grocery_store||[]).push([[657],{7994:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-6758bf8f",path:"/blogs/PCCNotes/101401.html",title:"字典序问题",lang:"zh-CN",frontmatter:{title:"字典序问题",date:"2020-10-14T00:00:00.000Z",tags:["笔记"],categories:["算法笔记"]},excerpt:"",headers:[{level:2,title:"题目描述",slug:"题目描述",children:[]},{level:2,title:"算法设计",slug:"算法设计",children:[]},{level:2,title:"数据输入",slug:"数据输入",children:[]},{level:2,title:"结果输出",slug:"结果输出",children:[{level:3,title:"代码",slug:"代码",children:[]},{level:3,title:"复杂性分析",slug:"复杂性分析",children:[]}]}],git:{createdTime:1642079704e3,updatedTime:1642079704e3,contributors:[{name:"shinuyeim",email:"shinuyemail@gmail.com",commits:1}]}}},8121:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const t=(0,a(6252).uE)('<h2 id="题目描述" tabindex="-1"><a class="header-anchor" href="#题目描述" aria-hidden="true">#</a> 题目描述</h2><p>在数据加密和压缩中，常需要对特殊的字符串进行编码。给定的字母表A由26个小写英文字母组成，即A={a,b,c,...,z}。该字母表产生的升序字符串是指字符串中字母从左到右出现的次序与字母在字母表中出现的次序想听你，且每个字符最多出现1次。例如，a、b、ab、bc、xyz等字符串是升序字符串。现对字母表A产生的所有长度不超过6的升序字符串按照字典序排列并编码如下。</p><table><thead><tr><th style="text-align:center;"></th><th style="text-align:center;"></th><th style="text-align:center;"></th><th style="text-align:center;"></th><th style="text-align:center;"></th><th style="text-align:center;"></th><th style="text-align:center;"></th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td style="text-align:center;">2</td><td style="text-align:center;">...</td><td style="text-align:center;">26</td><td style="text-align:center;">27</td><td style="text-align:center;">28</td><td style="text-align:center;">...</td></tr><tr><td style="text-align:center;">a</td><td style="text-align:center;">b</td><td style="text-align:center;">...</td><td style="text-align:center;">z</td><td style="text-align:center;">ab</td><td style="text-align:center;">ac</td><td style="text-align:center;">...</td></tr><tr><td style="text-align:center;">对于给定的长度不超过6的升序字符串，迅速计算出它在上述字典中的编码。</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr></tbody></table><h2 id="算法设计" tabindex="-1"><a class="header-anchor" href="#算法设计" aria-hidden="true">#</a> 算法设计</h2><p>对于给定的长度不超过6的升序字符串，计算它在上述字典中的编码。</p><h2 id="数据输入" tabindex="-1"><a class="header-anchor" href="#数据输入" aria-hidden="true">#</a> 数据输入</h2><p>输入数据由文件名为input.txt的文本提供。文件的第一行是一个正整数k，表示接下来有k行。在接下来的k行中，每行给出一个字符串。</p><h2 id="结果输出" tabindex="-1"><a class="header-anchor" href="#结果输出" aria-hidden="true">#</a> 结果输出</h2><p>将计算结果输出到文件output.txt。文件有k行，每行对应一个字符串的编码。</p><h3 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h&gt;</span></span>\n\n<span class="token keyword">int</span> <span class="token function">combine</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//计算组合数的函数</span>\n    <span class="token keyword">double</span> sum1<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token keyword">double</span> sum2<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token operator">&gt;</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>\n    <span class="token keyword">else</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token operator">-</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//计算(n-m)!</span>\n\tsum1<span class="token operator">*=</span>i<span class="token punctuation">;</span><span class="token punctuation">}</span>\n\t<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//计算n!/m!</span>\n    sum2<span class="token operator">*=</span>i<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>\n    <span class="token keyword">return</span> sum2<span class="token operator">/</span>sum1<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">//计算与输入字符串同位数，但在该字符串之前的升序字符串序列</span>\n<span class="token keyword">int</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> low<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">int</span> len<span class="token operator">=</span><span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">char</span> high<span class="token operator">=</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>low<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>high<span class="token operator">-</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>sum<span class="token operator">+=</span><span class="token function">combine</span><span class="token punctuation">(</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>sum<span class="token operator">+=</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>str<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>high<span class="token operator">-</span><span class="token string">&#39;a&#39;</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>\n    <span class="token keyword">return</span> sum<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">&quot;文件路径\\\\input.txt&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;r&quot;</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">&quot;文件路径\\\\output.txt&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;w&quot;</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">int</span> n<span class="token punctuation">;</span>\n    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>\n        <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%s&quot;</span><span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>sum<span class="token operator">+=</span><span class="token function">combine</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>\n        sum<span class="token operator">+=</span><span class="token function">count</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><h3 id="复杂性分析" tabindex="-1"><a class="header-anchor" href="#复杂性分析" aria-hidden="true">#</a> 复杂性分析</h3><p>时间复杂度：同归并排序O(n)。</p>',13),p={},e=(0,a(3744).Z)(p,[["render",function(n,s){return t}]])}}]);