"use strict";(self.webpackChunkafternoon_grocery_store=self.webpackChunkafternoon_grocery_store||[]).push([[800],{8694:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-dbf2f214",path:"/blogs/LeetCode/2020/11-01-167.html",title:"两数之和 II - 输入有序数组",lang:"zh-CN",frontmatter:{title:"两数之和 II - 输入有序数组",date:"2020-11-01T00:00:00.000Z",tags:["简单","力扣"],categories:["算法笔记"]},excerpt:"",headers:[{level:2,title:"题目描述",slug:"题目描述",children:[{level:3,title:"示例1:",slug:"示例1",children:[]},{level:3,title:"示例2:",slug:"示例2",children:[]}]},{level:2,title:"题目分析",slug:"题目分析",children:[{level:3,title:"算法设计",slug:"算法设计",children:[]},{level:3,title:"代码",slug:"代码",children:[]}]}],git:{createdTime:1642079704e3,updatedTime:1642079704e3,contributors:[{name:"shinuyeim",email:"shinuyemail@gmail.com",commits:1}]}}},6786:(n,s,a)=>{a.r(s),a.d(s,{default:()=>h});var e=a(6252);const t=(0,e._)("h2",{id:"题目描述",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#题目描述","aria-hidden":"true"},"#"),(0,e.Uk)(" 题目描述")],-1),p=(0,e._)("p",null,"给定一个已按照升序排列 的有序数组，找到两个数使得它们相加之和等于目标数。",-1),o=(0,e._)("p",null,"函数应该返回这两个下标值 index1 和 index2，其中 index1 必须小于 index2。",-1),l=(0,e._)("div",{class:"custom-container tip"},[(0,e._)("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[(0,e._)("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[(0,e._)("circle",{cx:"12",cy:"12",r:"9"}),(0,e._)("path",{d:"M12 8h.01"}),(0,e._)("path",{d:"M11 12h1v4h1"})])]),(0,e._)("p",{class:"custom-container-title"},"TIP"),(0,e._)("p",null,[(0,e.Uk)("返回的下标值（index1 和 index2）不是从零开始的。"),(0,e._)("br"),(0,e.Uk)(" 你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。")])],-1),c=(0,e._)("h3",{id:"示例1",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#示例1","aria-hidden":"true"},"#"),(0,e.Uk)(" 示例1:")],-1),r=(0,e._)("div",{class:"custom-container tip"},[(0,e._)("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[(0,e._)("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[(0,e._)("circle",{cx:"12",cy:"12",r:"9"}),(0,e._)("path",{d:"M12 8h.01"}),(0,e._)("path",{d:"M11 12h1v4h1"})])]),(0,e._)("p",{class:"custom-container-title"},"TIP"),(0,e._)("p",null,[(0,e.Uk)("输入：[0,1,3]"),(0,e._)("br"),(0,e.Uk)(" 输出：2")])],-1),i=(0,e._)("h3",{id:"示例2",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#示例2","aria-hidden":"true"},"#"),(0,e.Uk)(" 示例2:")],-1),u=(0,e._)("div",{class:"custom-container tip"},[(0,e._)("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[(0,e._)("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[(0,e._)("circle",{cx:"12",cy:"12",r:"9"}),(0,e._)("path",{d:"M12 8h.01"}),(0,e._)("path",{d:"M11 12h1v4h1"})])]),(0,e._)("p",{class:"custom-container-title"},"TIP"),(0,e._)("p",null,[(0,e.Uk)("输入: numbers = [2, 7, 11, 15], target = 9"),(0,e._)("br"),(0,e.Uk)(" 输出: [1,2]"),(0,e._)("br"),(0,e.Uk)(" 解释: 2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。")])],-1),k=(0,e.uE)('<h2 id="题目分析" tabindex="-1"><a class="header-anchor" href="#题目分析" aria-hidden="true">#</a> 题目分析</h2><p>初始时两个指针分别指向第一个元素位置和最后一个元素的位置。每次计算两个指针指向的两个元素之和，并和目标值比较。如果两个元素之和等于目标值，则发现了唯一解。如果两个元素之和小于目标值，则将左侧指针右移一位。如果两个元素之和大于目标值，则将右侧指针左移一位。移动指针之后，重复上述操作，直到找到答案。</p><h3 id="算法设计" tabindex="-1"><a class="header-anchor" href="#算法设计" aria-hidden="true">#</a> 算法设计</h3><p>使用双指针的实质是缩小查找范围。那么会不会把可能的解过滤掉？答案是不会。假设numbers[i]+numbers[j]=target 是唯一解，其中 0 &lt;= i &lt; j &lt;= numbers.length - 1。初始时两个指针分别指向下标 0 和下标 numbers.length−1，左指针指向的下标小于或等于 i，右指针指向的下标大于或等于 j。除非初始时左指针和右指针已经位于下标 i 和 j，否则一定是左指针先到达下标 i 的位置或者右指针先到达下标 j 的位置。</p><p>如果左指针先到达下标 i 的位置，此时右指针还在下标 j 的右侧，sum &gt; target，因此一定是右指针左移，左指针不可能移到 i 的右侧。</p><p>如果右指针先到达下标 j 的位置，此时左指针还在下标 i 的左侧，sum &lt; target，因此一定是左指针右移，右指针不可能移到 j 的左侧。</p><p>由此可见，在整个移动过程中，左指针不可能移到 i 的右侧，右指针不可能移到 j 的左侧，因此不会把可能的解过滤掉。由于题目确保有唯一的答案，因此使用双指针一定可以找到答案。</p><h3 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> high <span class="token operator">=</span> numbers<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>\n        <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">int</span> sum <span class="token operator">=</span> numbers<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">+</span> numbers<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>low <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> high <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token operator">++</span>low<span class="token punctuation">;</span>\n            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                <span class="token operator">--</span>high<span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div>',9),d={},h=(0,a(3744).Z)(d,[["render",function(n,s){return(0,e.wg)(),(0,e.iD)(e.HY,null,[t,p,o,l,c,r,i,u,k],64)}]])}}]);