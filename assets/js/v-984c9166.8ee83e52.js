"use strict";(self.webpackChunkafternoon_grocery_store=self.webpackChunkafternoon_grocery_store||[]).push([[7343],{75:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e={key:"v-984c9166",path:"/blogs/LeetCode/2020/9-08-172FactorialTrailingZeroes.html",title:"阶乘后的零",lang:"zh-CN",frontmatter:{title:"阶乘后的零",date:"2020-09-08T00:00:00.000Z",tags:["简单","力扣"],categories:["算法笔记"]},excerpt:"",headers:[{level:2,title:"题目描述",slug:"题目描述",children:[{level:3,title:"示例1",slug:"示例1",children:[]},{level:3,title:"示例2",slug:"示例2",children:[]},{level:3,title:"说明",slug:"说明",children:[]}]},{level:2,title:"题目分析",slug:"题目分析",children:[{level:3,title:"代码",slug:"代码",children:[]}]}],git:{createdTime:1642079704e3,updatedTime:1642079704e3,contributors:[{name:"shinuyeim",email:"shinuyemail@gmail.com",commits:1}]}}},1265:(n,a,s)=>{s.r(a),s.d(a,{default:()=>d});var e=s(6252);const t=(0,e._)("h2",{id:"题目描述",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#题目描述","aria-hidden":"true"},"#"),(0,e.Uk)(" 题目描述")],-1),p=(0,e._)("p",null,"给定一个整数 n，返回 n! 结果尾数中零的数量。",-1),l=(0,e._)("h3",{id:"示例1",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#示例1","aria-hidden":"true"},"#"),(0,e.Uk)(" 示例1")],-1),o=(0,e._)("div",{class:"custom-container tip"},[(0,e._)("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[(0,e._)("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[(0,e._)("circle",{cx:"12",cy:"12",r:"9"}),(0,e._)("path",{d:"M12 8h.01"}),(0,e._)("path",{d:"M11 12h1v4h1"})])]),(0,e._)("p",{class:"custom-container-title"},"TIP"),(0,e._)("p",null,[(0,e.Uk)("输入: 3"),(0,e._)("br"),(0,e.Uk)(" 输出: 0"),(0,e._)("br"),(0,e.Uk)(" 解释: 3! = 6, 尾数中没有零。")])],-1),r=(0,e._)("h3",{id:"示例2",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#示例2","aria-hidden":"true"},"#"),(0,e.Uk)(" 示例2")],-1),c=(0,e._)("div",{class:"custom-container tip"},[(0,e._)("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[(0,e._)("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[(0,e._)("circle",{cx:"12",cy:"12",r:"9"}),(0,e._)("path",{d:"M12 8h.01"}),(0,e._)("path",{d:"M11 12h1v4h1"})])]),(0,e._)("p",{class:"custom-container-title"},"TIP"),(0,e._)("p",null,[(0,e.Uk)("输出: 1"),(0,e._)("br"),(0,e.Uk)(" 解释: 5! = 120, 尾数中有 1 个零.")])],-1),i=(0,e.uE)('<h3 id="说明" tabindex="-1"><a class="header-anchor" href="#说明" aria-hidden="true">#</a> 说明</h3><p>你算法的时间复杂度应为 O(log n) 。</p><h2 id="题目分析" tabindex="-1"><a class="header-anchor" href="#题目分析" aria-hidden="true">#</a> 题目分析</h2><p>对于 5!，也就是 5 * 4 * 3 * 2 * 1 = 120，我们发现结果会有一个 0，原因就是 2 和 5 相乘构成了一个 10。而对于 10 的话，其实也只有 2 * 5 可以构成，所以我们只需要找有多少对 2/5。</p><p>我们把每个乘数再稍微分解下，看一个例子。</p><blockquote><p>11! = 11 * 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1 = 11 * (2 * 5) * 9 * (4 * 2) * 7 * (3 * 2) * (1 * 5) * (2 * 2) * 3 * (1 * 2) * 1</p></blockquote><p>对于含有 2 的因子的话是 1 * 2, 2 * 2, 3 * 2, 4 * 2 ...</p><p>对于含有 5 的因子的话是 1 * 5, 2 * 5...</p><p>含有 2 的因子每两个出现一次，含有 5 的因子每 5 个出现一次，所有 2 出现的个数远远多于 5，换言之找到一个 5，一定能找到一个 2 与之配对。所以我们只需要找有多少个 5。</p><p>直接的，我们只需要判断每个累乘的数有多少个 5 的因子即可。</p><p>对于一个数的阶乘，就如之前分析的，5 的因子一定是每隔 5 个数出现一次，也就是下边的样子。</p><blockquote><p>n! = 1 * 2 * 3 * 4 * (1 * 5) * ... * (2 * 5) * ... * (3 * 5) *... * n</p></blockquote><p>因为每隔 5 个数出现一个 5，所以计算出现了多少个 5，我们只需要用 n/5 就可以算出来。</p><p>但还没有结束，继续分析。</p><blockquote><p>... * (1 * 5) * ... * (1 * 5 * 5) * ... * (2 * 5 * 5) * ... * (3 * 5 * 5) * ... * n</p></blockquote><p>每隔 25 个数字，出现的是两个 5，所以除了每隔 5 个数算作一个 5，每隔 25 个数，还需要多算一个 5。</p><p>也就是我们需要再加上 n / 25 个 5。</p><p>同理我们还会发现每隔 5 * 5 * 5 = 125 个数字，会出现 3 个 5，所以我们还需要再加上 n / 125 。</p><p>综上，规律就是每隔 5 个数，出现一个 5，每隔 25 个数，出现 2 个 5，每隔 125 个数，出现 3 个 5... 以此类推。</p><p>最终 5 的个数就是 n / 5 + n / 25 + n / 125 ...</p><p>写程序的话，如果直接按照上边的式子计算，分母可能会造成溢出。所以算 n / 25 的时候，我们先把 n 更新，n = n / 5，然后再计算 n / 5 即可。后边的同理。</p><h3 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>\n<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">trailingZeroes</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        count <span class="token operator">+=</span> n <span class="token operator">/</span> <span class="token number">5</span><span class="token punctuation">;</span>\n        n <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">5</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> count<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div>',23),u={},d=(0,s(3744).Z)(u,[["render",function(n,a){return(0,e.wg)(),(0,e.iD)(e.HY,null,[t,p,l,o,r,c,i],64)}]])}}]);