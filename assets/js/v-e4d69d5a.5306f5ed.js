"use strict";(self.webpackChunkafternoon_grocery_store=self.webpackChunkafternoon_grocery_store||[]).push([[1054],{6231:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-e4d69d5a",path:"/blogs/LeetCode/2020/8-06-88MergeSortedArray.html",title:"合并两个有序数组",lang:"zh-CN",frontmatter:{title:"合并两个有序数组",tags:["简单","力扣"],categories:["算法笔记"]},excerpt:"",headers:[{level:2,title:"合并两个有序数组",slug:"合并两个有序数组",children:[]},{level:2,title:"说明：",slug:"说明",children:[]},{level:2,title:"示例1：",slug:"示例1",children:[]},{level:2,title:"代码",slug:"代码",children:[]},{level:2,title:"说明：",slug:"说明-1",children:[{level:3,title:"参量",slug:"参量",children:[]}]}],git:{createdTime:1642079704e3,updatedTime:1642079704e3,contributors:[{name:"shinuyeim",email:"shinuyemail@gmail.com",commits:1}]}}},8227:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const p=(0,a(6252).uE)('<h2 id="合并两个有序数组" tabindex="-1"><a class="header-anchor" href="#合并两个有序数组" aria-hidden="true">#</a> 合并两个有序数组</h2><p>给你两个有序整数数组 nums1 和 nums2，请你将 nums2 合并到 nums1 中，使 nums1 成为一个有序数组。</p><h2 id="说明" tabindex="-1"><a class="header-anchor" href="#说明" aria-hidden="true">#</a> 说明：</h2><blockquote><ul><li>初始化 nums1 和 nums2 的元素数量分别为 m 和 n.</li><li>你可以假设 nums1 有足够的空间（空间大小大于或等于 m + n）来保存 nums2 中的元素。</li></ul></blockquote><h2 id="示例1" tabindex="-1"><a class="header-anchor" href="#示例1" aria-hidden="true">#</a> 示例1：</h2><blockquote><p>输入: nums1 = [1,2,3,0,0,0], m = 3<br> nums2 = [2,5,6], n = 3</p></blockquote><blockquote><p>输出: [1,2,2,3,5,6]</p></blockquote><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>\n  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums1<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums2<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> nums1_copy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>nums1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nums1_copy<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">int</span> p1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">int</span> p2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p1 <span class="token operator">&lt;</span> m<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>p2 <span class="token operator">&lt;</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span>\n      nums1<span class="token punctuation">[</span>p<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>nums1_copy<span class="token punctuation">[</span>p1<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums2<span class="token punctuation">[</span>p2<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> nums1_copy<span class="token punctuation">[</span>p1<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">:</span> nums2<span class="token punctuation">[</span>p2<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>p1 <span class="token operator">&lt;</span> m<span class="token punctuation">)</span>\n      <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>nums1_copy<span class="token punctuation">,</span> p1<span class="token punctuation">,</span> nums1<span class="token punctuation">,</span> p1 <span class="token operator">+</span> p2<span class="token punctuation">,</span> m <span class="token operator">+</span> n <span class="token operator">-</span> p1 <span class="token operator">-</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>p2 <span class="token operator">&lt;</span> n<span class="token punctuation">)</span>\n      <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>nums2<span class="token punctuation">,</span> p2<span class="token punctuation">,</span> nums1<span class="token punctuation">,</span> p1 <span class="token operator">+</span> p2<span class="token punctuation">,</span> m <span class="token operator">+</span> n <span class="token operator">-</span> p1 <span class="token operator">-</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h2 id="说明-1" tabindex="-1"><a class="header-anchor" href="#说明-1" aria-hidden="true">#</a> 说明：</h2><p>System.arraycopy()</p><blockquote><p>public static void arraycopy(Object src, int srcPos, Object dest, int destPos, int length)</p></blockquote><h3 id="参量" tabindex="-1"><a class="header-anchor" href="#参量" aria-hidden="true">#</a> 参量</h3><blockquote><p>src-这是源数组。</p><p>srcPos-这是源数组中的起始位置。</p><p>dest-这是目标数组。</p><p>destPos-这是目标数据中的起始位置。</p><p>length-这是要复制的数组元素的数量。</p></blockquote>',14),t={},e=(0,a(3744).Z)(t,[["render",function(n,s){return p}]])}}]);