"use strict";(self.webpackChunkafternoon_grocery_store=self.webpackChunkafternoon_grocery_store||[]).push([[8516],{6503:(n,a,s)=>{s.r(a),s.d(a,{data:()=>p});const p={key:"v-073a95fe",path:"/blogs/LeetCode/2021/2021-01-04-1491average-salary-excluding-the-minimum-and-maximum-salary.html",title:"去掉最低工资和最高工资后的工资平均值",lang:"zh-CN",frontmatter:{title:"去掉最低工资和最高工资后的工资平均值",date:"2021-01-04T00:00:00.000Z",tags:["简单","力扣","排序"],categories:["算法笔记"]},excerpt:"",headers:[{level:2,title:"题目描述",slug:"题目描述",children:[]},{level:2,title:"示例",slug:"示例",children:[]},{level:2,title:"算法设计",slug:"算法设计",children:[]},{level:2,title:"代码",slug:"代码",children:[]},{level:2,title:"复杂度分析",slug:"复杂度分析",children:[]}],git:{createdTime:1642079704e3,updatedTime:1642079704e3,contributors:[{name:"shinuyeim",email:"shinuyemail@gmail.com",commits:1}]}}},5791:(n,a,s)=>{s.r(a),s.d(a,{default:()=>u});var p=s(6252);const e=(0,p._)("h2",{id:"题目描述",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#题目描述","aria-hidden":"true"},"#"),(0,p.Uk)(" 题目描述")],-1),t=(0,p._)("p",null,"给你一个整数数组 salary ，数组里每个数都是 唯一 的，其中 salary[i] 是第 i 个员工的工资。",-1),l=(0,p._)("p",null,"请你返回去掉最低工资和最高工资以后，剩下员工工资的平均值。",-1),o=(0,p._)("h2",{id:"示例",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#示例","aria-hidden":"true"},"#"),(0,p.Uk)(" 示例")],-1),r=(0,p._)("div",{class:"custom-container tip"},[(0,p._)("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[(0,p._)("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[(0,p._)("circle",{cx:"12",cy:"12",r:"9"}),(0,p._)("path",{d:"M12 8h.01"}),(0,p._)("path",{d:"M11 12h1v4h1"})])]),(0,p._)("p",{class:"custom-container-title"},"TIP"),(0,p._)("p",null,[(0,p.Uk)("输入：salary = [4000,3000,1000,2000]"),(0,p._)("br"),(0,p.Uk)(" 输出：2500.00000"),(0,p._)("br"),(0,p.Uk)(" 解释：最低工资和最高工资分别是 1000 和 4000 。"),(0,p._)("br"),(0,p.Uk)(" 去掉最低工资和最高工资以后的平均工资是 (2000+3000)/2= 2500")]),(0,p._)("p",null,[(0,p.Uk)("输入：salary = [1000,2000,3000]"),(0,p._)("br"),(0,p.Uk)(" 输出：2000.00000"),(0,p._)("br"),(0,p.Uk)(" 解释：最低工资和最高工资分别是 1000 和 3000 。"),(0,p._)("br"),(0,p.Uk)(" 去掉最低工资和最高工资以后的平均工资是 (2000)/1= 2000")]),(0,p._)("p",null,[(0,p.Uk)("输入：salary = [6000,5000,4000,3000,2000,1000]"),(0,p._)("br"),(0,p.Uk)(" 输出：3500.00000")]),(0,p._)("p",null,[(0,p.Uk)("输入：salary = [8000,9000,2000,3000,6000,1000]"),(0,p._)("br"),(0,p.Uk)(" 输出：4750.00000")]),(0,p._)("p",null,[(0,p.Uk)("输入：nums = [6]"),(0,p._)("br"),(0,p.Uk)(" 输出：[6]")])],-1),c=(0,p.uE)('<p>Tips:</p><ol><li>3 &lt;= salary.length &lt;= 100</li><li>10^3 &lt;= salary[i] &lt;= 10^6</li><li>salary[i] 是唯一的。</li><li>与真实值误差在 10^-5 以内的结果都将视为正确答案。</li></ol><h2 id="算法设计" tabindex="-1"><a class="header-anchor" href="#算法设计" aria-hidden="true">#</a> 算法设计</h2><p>这个题目并不难，只需要注意一点细节就行。其实这个题并不用排序，只需要找到最大值和最小值就行。只需要遍历一遍整个数组就可以，然而排序一般都做不到时间复杂度为O(n)。</p><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">double</span> <span class="token function">average</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> salary<span class="token punctuation">,</span> <span class="token keyword">int</span> salarySize<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">int</span> max <span class="token operator">=</span> salary<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>min <span class="token operator">=</span> salary<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">double</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> salarySize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>salary<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> max<span class="token punctuation">)</span>\n            max <span class="token operator">=</span> salary<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>salary<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> min<span class="token punctuation">)</span>\n            min <span class="token operator">=</span> salary<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        sum <span class="token operator">+=</span>salary<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sum <span class="token operator">-</span> min <span class="token operator">-</span> max<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>salarySize <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   \n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h2><p>时间复杂度：O(n)。选取最大值、最小值和求和的过程的时间代价都是 O(n)，故渐进时间复杂度为 O(n)。</p><p>空间复杂度：O(1)。这里只用到了常量级别的辅助空间。</p>',9),i={},u=(0,s(3744).Z)(i,[["render",function(n,a){return(0,p.wg)(),(0,p.iD)(p.HY,null,[e,t,l,o,r,c],64)}]])}}]);