"use strict";(self.webpackChunkafternoon_grocery_store=self.webpackChunkafternoon_grocery_store||[]).push([[2272],{2553:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-daea6e0a",path:"/blogs/LeetCode/2020/10-13TheMissingNumber.html",title:"剑指Offer 53 - || 0 ~ n-1中缺失的数字",lang:"zh-CN",frontmatter:{title:"剑指Offer 53 - || 0 ~ n-1中缺失的数字",date:"2020-10-13T00:00:00.000Z",tags:["简单","力扣"],categories:["算法笔记"]},excerpt:"",headers:[{level:2,title:"题目描述",slug:"题目描述",children:[{level:3,title:"示例1:",slug:"示例1",children:[]},{level:3,title:"示例2:",slug:"示例2",children:[]},{level:3,title:"限制",slug:"限制",children:[]}]},{level:2,title:"题目分析",slug:"题目分析",children:[{level:3,title:"算法设计",slug:"算法设计",children:[]},{level:3,title:"代码",slug:"代码",children:[]}]}],git:{createdTime:1642079704e3,updatedTime:1642079704e3,contributors:[{name:"shinuyeim",email:"shinuyemail@gmail.com",commits:1}]}}},5112:(n,s,a)=>{a.r(s),a.d(s,{default:()=>h});var e=a(6252);const t=(0,e._)("h2",{id:"题目描述",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#题目描述","aria-hidden":"true"},"#"),(0,e.Uk)(" 题目描述")],-1),p=(0,e._)("p",null,"一个长度为n-1的递增排序数组中的所有数字都是唯一的，并且每个数字都在范围0～n-1之内。在范围0～n-1内的n个数字中有且只有一个数字不在该数组中，请找出这个数字。",-1),o=(0,e._)("h3",{id:"示例1",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#示例1","aria-hidden":"true"},"#"),(0,e.Uk)(" 示例1:")],-1),l=(0,e._)("div",{class:"custom-container tip"},[(0,e._)("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[(0,e._)("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[(0,e._)("circle",{cx:"12",cy:"12",r:"9"}),(0,e._)("path",{d:"M12 8h.01"}),(0,e._)("path",{d:"M11 12h1v4h1"})])]),(0,e._)("p",{class:"custom-container-title"},"TIP"),(0,e._)("p",null,"输入：[0,1,3] 输出：2")],-1),r=(0,e._)("h3",{id:"示例2",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#示例2","aria-hidden":"true"},"#"),(0,e.Uk)(" 示例2:")],-1),c=(0,e._)("div",{class:"custom-container tip"},[(0,e._)("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[(0,e._)("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[(0,e._)("circle",{cx:"12",cy:"12",r:"9"}),(0,e._)("path",{d:"M12 8h.01"}),(0,e._)("path",{d:"M11 12h1v4h1"})])]),(0,e._)("p",{class:"custom-container-title"},"TIP"),(0,e._)("p",null,[(0,e.Uk)("输入：[0,1,2,3,4,5,6,7,9]"),(0,e._)("br"),(0,e.Uk)(" 输出：8")])],-1),i=(0,e.uE)('<h3 id="限制" tabindex="-1"><a class="header-anchor" href="#限制" aria-hidden="true">#</a> 限制</h3><p>1 &lt;= 数组长度 &lt;= 10000</p><h2 id="题目分析" tabindex="-1"><a class="header-anchor" href="#题目分析" aria-hidden="true">#</a> 题目分析</h2><p>输入的数最小为0，数组长度最小为0，并且数组内的数字都是0~n-1的范围内递增且唯一的。所有我们可以知道，当数组长度为1是，数组内的元素是唯一确定的也就是0。其实需要找到数组中的不存在的元素就是找到数组元素与下标(数组的位置)不同时就是不存在的那个元素，就是当a[m] != 时。</p><h3 id="算法设计" tabindex="-1"><a class="header-anchor" href="#算法设计" aria-hidden="true">#</a> 算法设计</h3><p>采用二分法查找，可以节省很多搜索时间。 例如有数组a[5] = {0, 1, 2, 3, 5}。 先设m = (i + j) / 2。则m等于2，判断a[2] == 2，则可以证明，在a[2]前面的元素数组下标与元素值对应，因为如果缺少一个，因为数组时递增，且元素不重复，则到a[2]时就不可能有a[2] == 2，这样就很简单，当a[m] == m 时，就往a[m]后面继续查找，当a[m] != m 时就证明在a[m]前面就有缺失的元素，这是第一步。 第二步就是当第一步确定了需要在数组的左边半边还是右半边查找，当要在左边查找时，令 j = m-1;需要在右边查找时，令 i = m+1;直到找出结束。</p>',6),u=(0,e._)("div",{class:"custom-container tip"},[(0,e._)("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[(0,e._)("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[(0,e._)("circle",{cx:"12",cy:"12",r:"9"}),(0,e._)("path",{d:"M12 8h.01"}),(0,e._)("path",{d:"M11 12h1v4h1"})])]),(0,e._)("p",{class:"custom-container-title"},"TIP"),(0,e._)("p",null,"i和j分别代表数组的左右下标")],-1),k=(0,e.uE)('<h3 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">missingNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>\n        <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> j<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">==</span> m<span class="token punctuation">)</span> i <span class="token operator">=</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n            <span class="token keyword">else</span> j <span class="token operator">=</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> i<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div>',2),d={},h=(0,a(3744).Z)(d,[["render",function(n,s){return(0,e.wg)(),(0,e.iD)(e.HY,null,[t,p,o,l,r,c,i,u,k],64)}]])}}]);