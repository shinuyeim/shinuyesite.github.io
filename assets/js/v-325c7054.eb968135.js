"use strict";(self.webpackChunkafternoon_grocery_store=self.webpackChunkafternoon_grocery_store||[]).push([[9348],{2494:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-325c7054",path:"/blogs/LeetCode/2021/2021-01-08-1636sort-array-by-increasing-frequency.html",title:"按照频率将数组升序排序",lang:"zh-CN",frontmatter:{title:"按照频率将数组升序排序",date:"2021-01-08T00:00:00.000Z",tags:["简单","力扣","哈希表"],categories:["算法笔记"]},excerpt:"",headers:[{level:2,title:"题目描述",slug:"题目描述",children:[]},{level:2,title:"示例",slug:"示例",children:[]},{level:2,title:"算法设计",slug:"算法设计",children:[]},{level:2,title:"代码",slug:"代码",children:[]}],git:{createdTime:1642079704e3,updatedTime:1642079704e3,contributors:[{name:"shinuyeim",email:"shinuyemail@gmail.com",commits:1}]}}},9637:(n,s,a)=>{a.r(s),a.d(s,{default:()=>i});var p=a(6252);const t=(0,p._)("h2",{id:"题目描述",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#题目描述","aria-hidden":"true"},"#"),(0,p.Uk)(" 题目描述")],-1),e=(0,p._)("p",null,"给你一个整数数组 nums ，请你将数组按照每个值的频率升序排序。如果有多个值的频率相同，请你按照数值本身将它们降序排序。",-1),o=(0,p._)("p",null,"请你返回排序后的数组。",-1),c=(0,p._)("h2",{id:"示例",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#示例","aria-hidden":"true"},"#"),(0,p.Uk)(" 示例")],-1),l=(0,p._)("div",{class:"custom-container tip"},[(0,p._)("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[(0,p._)("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[(0,p._)("circle",{cx:"12",cy:"12",r:"9"}),(0,p._)("path",{d:"M12 8h.01"}),(0,p._)("path",{d:"M11 12h1v4h1"})])]),(0,p._)("p",{class:"custom-container-title"},"TIP"),(0,p._)("p",null,[(0,p.Uk)("输入：nums = [1,1,2,2,2,3]"),(0,p._)("br"),(0,p.Uk)(" 输出：[3,1,1,2,2,2]"),(0,p._)("br"),(0,p.Uk)(" 解释：'3' 频率为 1，'1' 频率为 2，'2' 频率为 3 。")]),(0,p._)("p",null,[(0,p.Uk)("输入：nums = [2,3,1,3,2]"),(0,p._)("br"),(0,p.Uk)(" 输出：[1,3,3,2,2]"),(0,p._)("br"),(0,p.Uk)(" 解释：'2' 和 '3' 频率都为 2 ，所以它们之间按照数值本身降序排序。")]),(0,p._)("p",null,[(0,p.Uk)("输入：nums = [-1,1,-6,4,5,-6,1,4,1]"),(0,p._)("br"),(0,p.Uk)(" 输出：[5,-1,4,4,-6,-6,1,1,1]")])],-1),r=(0,p.uE)('<p>Tips:</p><ol><li>1 &lt;= nums.length &lt;= 100。</li><li>-100 &lt;= nums[i] &lt;= 100。</li></ol><h2 id="算法设计" tabindex="-1"><a class="header-anchor" href="#算法设计" aria-hidden="true">#</a> 算法设计</h2><p>这一题的难度比其他简单难度的难一点，读完题目时感觉这题很简单，但是编起来就不是那么容易了。</p><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><p>哈希</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NUM_MAX</span> <span class="token expression"><span class="token number">201</span></span></span>\n<span class="token keyword">int</span> g_hash<span class="token punctuation">[</span>NUM_MAX<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">int</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>b<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">int</span> tmpa <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>a <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">;</span>\n    <span class="token keyword">int</span> tmpb <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>b <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">;</span>\n    <span class="token comment">// 如果频率相等，数字降序排序</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>g_hash<span class="token punctuation">[</span>tmpb<span class="token punctuation">]</span> <span class="token operator">==</span> g_hash<span class="token punctuation">[</span>tmpa<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> tmpb <span class="token operator">-</span> tmpa<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 如果频率不等，频率升序排序</span>\n    <span class="token keyword">return</span> g_hash<span class="token punctuation">[</span>tmpa<span class="token punctuation">]</span> <span class="token operator">-</span> g_hash<span class="token punctuation">[</span>tmpb<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">/**\n * Note: The returned array must be malloced, assume caller calls free().\n */</span>\n<span class="token keyword">int</span> <span class="token operator">*</span><span class="token function">frequencySort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>returnSize<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n\n    <span class="token function">memset</span><span class="token punctuation">(</span>g_hash<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> NUM_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numsSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        g_hash<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">qsort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token operator">*</span>returnSize <span class="token operator">=</span> numsSize<span class="token punctuation">;</span>\n    <span class="token keyword">return</span> nums<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n## 复杂度分析     \n时间复杂度：<span class="token function">O</span><span class="token punctuation">(</span>nlogn<span class="token punctuation">)</span>，其中 n 为 s 的长度。排序的时间复杂度为 <span class="token function">O</span><span class="token punctuation">(</span>nlogn<span class="token punctuation">)</span>，比较两个字符串是否相等时间复杂度为 <span class="token function">O</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>，因此总体时间复杂度为 <span class="token function">O</span><span class="token punctuation">(</span>n log n <span class="token operator">+</span> n<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">O</span><span class="token punctuation">(</span>nlogn<span class="token punctuation">)</span>。\n\n\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div>',7),u={},i=(0,a(3744).Z)(u,[["render",function(n,s){return(0,p.wg)(),(0,p.iD)(p.HY,null,[t,e,o,c,l,r],64)}]])}}]);